"""
Junior Manager Staff Application Creation Handler

This module implements application creation handlers for Junior Manager role,
allowing junior managers to create connection requests only (no technical service)
on behalf of clients.
"""

from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from typing import Dict, Any, Optional

from database.base_queries import get_user_by_telegram_id, get_user_lang
from handlers.staff_application_creation import RoleBasedApplicationHandler
from states.staff_application_states import StaffApplicationStates
from keyboards.junior_manager_buttons import get_junior_manager_main_keyboard
from utils.logger import setup_module_logger
from utils.role_router import get_role_router
from utils.inline_cleanup import cleanup_user_inline_messages

logger = setup_module_logger("junior_manager.staff_application_creation")


def get_junior_manager_staff_application_router():
    """Get router for junior manager staff application creation handlers"""
    router = get_role_router("junior_manager")
    
    # Initialize the role-based application handler
    app_handler = RoleBasedApplicationHandler()
    
    @router.message(F.text.in_(["üîå Ulanish arizasi yaratish", "üîå –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"]))
    async def junior_manager_create_connection_request(message: Message, state: FSMContext):
        """Handle junior manager creating connection request for client"""
        try:
            await cleanup_user_inline_messages(message.from_user.id)
            user = await get_user_by_telegram_id(message.from_user.id)
            
            if not user or user['role'] != 'junior_manager':
                lang = user.get('language', 'uz') if user else 'uz'
                error_text = "Sizda kichik menejer huquqi yo'q." if lang == 'uz' else "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–ª–∞–¥—à–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞."
                await message.answer(error_text)
                return
            
            lang = user.get('language', 'uz')
            logger.info(f"Junior Manager {user['id']} starting connection request creation")
            
            # Start application creation process
            result = await app_handler.start_application_creation(
                creator_role='junior_manager',
                creator_id=user['id'],
                application_type='connection_request'
            )
            
            if not result['success']:
                error_msg = result.get('error_message', 'Unknown error')
                if result.get('error_type') == 'permission_denied':
                    error_text = (
                        f"Ruxsat rad etildi: {error_msg}" if lang == 'uz' 
                        else f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: {error_msg}"
                    )
                else:
                    error_text = (
                        f"Xatolik yuz berdi: {error_msg}" if lang == 'uz'
                        else f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error_msg}"
                    )
                await message.answer(error_text)
                return
            
            # Store creator context in FSM data
            await state.update_data(
                creator_context=result['creator_context'],
                application_type='connection_request'
            )
            
            # Set initial state and prompt for client selection
            await state.set_state(StaffApplicationStates.selecting_client_search_method)
            
            prompt_text = (
                "üîå Ulanish arizasi yaratish\n\n"
                "Mijozni qanday qidirishni xohlaysiz?\n\n"
                "üì± Telefon raqami bo'yicha\n"
                "üë§ Ism bo'yicha\n"
                "üÜî Mijoz ID bo'yicha\n"
                "‚ûï Yangi mijoz yaratish"
            ) if lang == 'uz' else (
                "üîå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ\n\n"
                "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞?\n\n"
                "üì± –ü–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
                "üë§ –ü–æ –∏–º–µ–Ω–∏\n"
                "üÜî –ü–æ ID –∫–ª–∏–µ–Ω—Ç–∞\n"
                "‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"
            )
            
            # Create inline keyboard for client search options
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üì± Telefon" if lang == 'uz' else "üì± –¢–µ–ª–µ—Ñ–æ–Ω",
                        callback_data="jm_client_search_phone"
                    ),
                    InlineKeyboardButton(
                        text="üë§ Ism" if lang == 'uz' else "üë§ –ò–º—è",
                        callback_data="jm_client_search_name"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üÜî ID" if lang == 'uz' else "üÜî ID",
                        callback_data="jm_client_search_id"
                    ),
                    InlineKeyboardButton(
                        text="‚ûï Yangi" if lang == 'uz' else "‚ûï –ù–æ–≤—ã–π",
                        callback_data="jm_client_search_new"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚ùå Bekor qilish" if lang == 'uz' else "‚ùå –û—Ç–º–µ–Ω–∞",
                        callback_data="jm_cancel_application_creation"
                    )
                ]
            ])
            
            await message.answer(prompt_text, reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"Error in junior_manager_create_connection_request: {e}", exc_info=True)
            lang = await get_user_lang(message.from_user.id)
            error_text = "Xatolik yuz berdi" if lang == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"
            await message.answer(error_text)
    
    @router.message(F.text.in_(["üîß Texnik xizmat yaratish", "üîß –°–æ–∑–¥–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∑–∞—è–≤–∫—É"]))
    async def junior_manager_technical_service_denied(message: Message, state: FSMContext):
        """Handle junior manager attempting to create technical service (denied)"""
        try:
            user = await get_user_by_telegram_id(message.from_user.id)
            if not user or user['role'] != 'junior_manager':
                return
            
            lang = user.get('language', 'uz')
            logger.warning(f"Junior Manager {user['id']} attempted to create technical service (denied)")
            
            # Junior managers cannot create technical service requests
            denied_text = (
                "‚ùå Ruxsat rad etildi\n\n"
                "Kichik menejerlar faqat ulanish arizalarini yarata oladi.\n"
                "Texnik xizmat arizalarini yaratish uchun menejer yoki controller bilan bog'laning."
            ) if lang == 'uz' else (
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω\n\n"
                "–ú–ª–∞–¥—à–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.\n"
                "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É –∏–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—É."
            )
            
            await message.answer(denied_text)
            
        except Exception as e:
            logger.error(f"Error in junior_manager_technical_service_denied: {e}", exc_info=True)
    
    @router.callback_query(F.data.startswith("jm_client_search_"))
    async def handle_junior_manager_client_search_method(callback: CallbackQuery, state: FSMContext):
        """Handle client search method selection for junior manager"""
        try:
            user = await get_user_by_telegram_id(callback.from_user.id)
            if not user or user['role'] != 'junior_manager':
                await callback.answer("Ruxsat yo'q", show_alert=True)
                return
            
            lang = user.get('language', 'uz')
            search_method = callback.data.split("_")[-1]  # phone, name, id, new
            
            # Update FSM data with search method
            await state.update_data(client_search_method=search_method)
            
            if search_method == "phone":
                await state.set_state(StaffApplicationStates.entering_client_phone)
                prompt_text = (
                    "üì± Mijoz telefon raqamini kiriting:\n\n"
                    "Masalan: +998901234567"
                ) if lang == 'uz' else (
                    "üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:\n\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä: +998901234567"
                )
                
            elif search_method == "name":
                await state.set_state(StaffApplicationStates.entering_client_name)
                prompt_text = (
                    "üë§ Mijoz ismini kiriting:\n\n"
                    "To'liq ism va familiyani kiriting"
                ) if lang == 'uz' else (
                    "üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:\n\n"
                    "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é"
                )
                
            elif search_method == "id":
                await state.set_state(StaffApplicationStates.entering_client_id)
                prompt_text = (
                    "üÜî Mijoz ID raqamini kiriting:"
                ) if lang == 'uz' else (
                    "üÜî –í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞:"
                )
                
            elif search_method == "new":
                await state.set_state(StaffApplicationStates.creating_new_client)
                prompt_text = (
                    "‚ûï Yangi mijoz yaratish\n\n"
                    "Yangi mijoz ma'lumotlarini kiritishni boshlaymiz.\n"
                    "Birinchi navbatda, mijoz ismini kiriting:"
                ) if lang == 'uz' else (
                    "‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞\n\n"
                    "–ù–∞—á–∏–Ω–∞–µ–º –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.\n"
                    "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:"
                )
                await state.set_state(StaffApplicationStates.entering_new_client_name)
            
            await callback.message.edit_text(prompt_text)
            await callback.answer()
            
        except Exception as e:
            logger.error(f"Error in handle_junior_manager_client_search_method: {e}", exc_info=True)
            await callback.answer("Xatolik yuz berdi", show_alert=True)
    
    @router.callback_query(F.data == "jm_cancel_application_creation")
    async def junior_manager_cancel_application_creation(callback: CallbackQuery, state: FSMContext):
        """Cancel application creation and return to main menu for junior manager"""
        try:
            user = await get_user_by_telegram_id(callback.from_user.id)
            if not user or user['role'] != 'junior_manager':
                await callback.answer("Ruxsat yo'q", show_alert=True)
                return
            
            lang = user.get('language', 'uz')
            await state.clear()
            
            cancel_text = (
                "‚ùå Ariza yaratish bekor qilindi.\n\n"
                "Asosiy menyuga qaytdingiz."
            ) if lang == 'uz' else (
                "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
                "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
            )
            
            await callback.message.edit_text(
                cancel_text,
                reply_markup=None
            )
            
            # Send main menu
            main_menu_text = "Asosiy menyu" if lang == 'uz' else "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            await callback.message.answer(
                main_menu_text,
                reply_markup=get_junior_manager_main_keyboard(lang)
            )
            
            await callback.answer()
            
        except Exception as e:
            logger.error(f"Error in junior_manager_cancel_application_creation: {e}", exc_info=True)
            await callback.answer("Xatolik yuz berdi", show_alert=True)
    
    # Client search input handlers for junior manager
    @router.message(StaffApplicationStates.entering_client_phone)
    async def handle_junior_manager_client_phone_input(message: Message, state: FSMContext):
        """Handle client phone number input for junior manager"""
        try:
            user = await get_user_by_telegram_id(message.from_user.id)
            if not user or user['role'] != 'junior_manager':
                return
            
            lang = user.get('language', 'uz')
            phone = message.text.strip()
            
            # Basic phone validation
            if not phone.startswith('+') or len(phone) < 10:
                error_text = (
                    "‚ùå Telefon raqami noto'g'ri formatda.\n"
                    "Iltimos, +998901234567 formatida kiriting."
                ) if lang == 'uz' else (
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +998901234567."
                )
                await message.answer(error_text)
                return
            
            # Store phone and search for client
            await state.update_data(client_phone=phone)
            await state.set_state(StaffApplicationStates.searching_client)
            
            search_text = (
                f"üîç Telefon raqami {phone} bo'yicha mijozni qidiryapman..."
            ) if lang == 'uz' else (
                f"üîç –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É {phone}..."
            )
            
            search_msg = await message.answer(search_text)
            
            # For demo purposes, simulate found client
            await _simulate_junior_manager_client_found(message, state, search_msg, phone, lang)
            
        except Exception as e:
            logger.error(f"Error in handle_junior_manager_client_phone_input: {e}", exc_info=True)
    
    @router.message(StaffApplicationStates.entering_client_name)
    async def handle_junior_manager_client_name_input(message: Message, state: FSMContext):
        """Handle client name input for junior manager"""
        try:
            user = await get_user_by_telegram_id(message.from_user.id)
            if not user or user['role'] != 'junior_manager':
                return
            
            lang = user.get('language', 'uz')
            name = message.text.strip()
            
            # Basic name validation
            if len(name) < 2:
                error_text = (
                    "‚ùå Ism juda qisqa. Kamida 2 ta harf bo'lishi kerak."
                ) if lang == 'uz' else (
                    "‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞."
                )
                await message.answer(error_text)
                return
            
            # Store name and search for client
            await state.update_data(client_name=name)
            await state.set_state(StaffApplicationStates.searching_client)
            
            search_text = (
                f"üîç '{name}' ismli mijozni qidiryapman..."
            ) if lang == 'uz' else (
                f"üîç –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ —Å –∏–º–µ–Ω–µ–º '{name}'..."
            )
            
            search_msg = await message.answer(search_text)
            
            # For demo purposes, simulate found client
            await _simulate_junior_manager_client_found(message, state, search_msg, name, lang)
            
        except Exception as e:
            logger.error(f"Error in handle_junior_manager_client_name_input: {e}", exc_info=True)
    
    @router.message(StaffApplicationStates.entering_client_id)
    async def handle_junior_manager_client_id_input(message: Message, state: FSMContext):
        """Handle client ID input for junior manager"""
        try:
            user = await get_user_by_telegram_id(message.from_user.id)
            if not user or user['role'] != 'junior_manager':
                return
            
            lang = user.get('language', 'uz')
            client_id_str = message.text.strip()
            
            # Validate ID is numeric
            try:
                client_id = int(client_id_str)
            except ValueError:
                error_text = (
                    "‚ùå ID raqam bo'lishi kerak. Masalan: 12345"
                ) if lang == 'uz' else (
                    "‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ù–∞–ø—Ä–∏–º–µ—Ä: 12345"
                )
                await message.answer(error_text)
                return
            
            # Store ID and search for client
            await state.update_data(client_id=client_id)
            await state.set_state(StaffApplicationStates.searching_client)
            
            search_text = (
                f"üîç ID {client_id} bo'yicha mijozni qidiryapman..."
            ) if lang == 'uz' else (
                f"üîç –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ —Å ID {client_id}..."
            )
            
            search_msg = await message.answer(search_text)
            
            # For demo purposes, simulate found client
            await _simulate_junior_manager_client_found(message, state, search_msg, str(client_id), lang)
            
        except Exception as e:
            logger.error(f"Error in handle_junior_manager_client_id_input: {e}", exc_info=True)
    
    return router


async def _simulate_junior_manager_client_found(message: Message, state: FSMContext, search_msg: Message, 
                                              search_value: str, lang: str):
    """
    Simulate client found for junior manager demo purposes.
    In production, this would be replaced with actual database search logic.
    """
    import asyncio
    
    # Simulate search delay
    await asyncio.sleep(1)
    
    # For demo, create a mock client
    mock_client = {
        'id': 12345,
        'full_name': 'Sardor Alimov',
        'phone': '+998901234567',
        'address': 'Toshkent, Yunusobod tumani'
    }
    
    # Store found client
    await state.update_data(selected_client=mock_client)
    await state.set_state(StaffApplicationStates.confirming_client_selection)
    
    # Update search message with found client
    found_text = (
        f"‚úÖ Mijoz topildi!\n\n"
        f"üë§ Ism: {mock_client['full_name']}\n"
        f"üì± Telefon: {mock_client['phone']}\n"
        f"üìç Manzil: {mock_client['address']}\n\n"
        f"Bu mijoz uchun ulanish arizasi yaratishni xohlaysizmi?"
    ) if lang == 'uz' else (
        f"‚úÖ –ö–ª–∏–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω!\n\n"
        f"üë§ –ò–º—è: {mock_client['full_name']}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {mock_client['phone']}\n"
        f"üìç –ê–¥—Ä–µ—Å: {mock_client['address']}\n\n"
        f"–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞?"
    )
    
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚úÖ Ha, davom etish" if lang == 'uz' else "‚úÖ –î–∞, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
                callback_data="jm_confirm_client_selection"
            )
        ],
        [
            InlineKeyboardButton(
                text="üîç Boshqa mijoz qidirish" if lang == 'uz' else "üîç –ù–∞–π—Ç–∏ –¥—Ä—É–≥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞",
                callback_data="jm_search_another_client"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚ùå Bekor qilish" if lang == 'uz' else "‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="jm_cancel_application_creation"
            )
        ]
    ])
    
    await search_msg.edit_text(found_text, reply_markup=keyboard)