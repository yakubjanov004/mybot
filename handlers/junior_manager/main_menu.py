from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from keyboards.junior_manager_buttons import get_junior_manager_main_keyboard
from database.base_queries import get_user_lang, get_user_by_telegram_id
from states.junior_manager_states import JuniorManagerMainMenuStates
from utils.logger import setup_logger
from utils.inline_cleanup import cleanup_user_inline_messages
from utils.role_router import get_role_router

def get_junior_manager_main_menu_router():
    logger = setup_logger('bot.junior_manager.main_menu')
    router = get_role_router("junior_manager")

    @router.message(F.text.in_(["/start", "üè† Asosiy menyu", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]))
    async def show_main_menu(message: Message, state: FSMContext):
        """Junior Manager main menu"""
        try:
            await cleanup_user_inline_messages(message.from_user.id)
            user = await get_user_by_telegram_id(message.from_user.id)
            
            if not user or user['role'] != 'junior_manager':
                lang = user.get('language', 'uz') if user else 'uz'
                text = "Sizda kichik menejer huquqi yo'q." if lang == 'uz' else "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–ª–∞–¥—à–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞."
                await message.answer(text)
                return
            
            lang = user.get('language', 'uz')
            keyboard = get_junior_manager_main_keyboard(lang)
            text = "üè† Asosiy menyu" if lang == "uz" else "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
            await message.answer(text, reply_markup=keyboard)
            
            if state is not None:
                await state.set_state(JuniorManagerMainMenuStates.main_menu)
            
            logger.info(f"Junior Manager {user['id']} accessed main menu")
            
        except Exception as e:
            logger.error(f"Error in junior_manager show_main_menu: {str(e)}", exc_info=True)
            lang = await get_user_lang(message.from_user.id)
            error_text = "Xatolik yuz berdi" if lang == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"
            await message.answer(error_text)

    # Staff application creation handler (connection requests only)
    @router.message(F.text.in_(["üîå Ulanish arizasi yaratish", "üîå –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"]))
    async def junior_manager_create_connection_application(message: Message, state: FSMContext):
        """Handle junior manager creating connection application"""
        try:
            await cleanup_user_inline_messages(message.from_user.id)
            user = await get_user_by_telegram_id(message.from_user.id)
            
            if not user or user['role'] != 'junior_manager':
                lang = user.get('language', 'uz') if user else 'uz'
                error_text = "Sizda kichik menejer huquqi yo'q." if lang == 'uz' else "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –º–ª–∞–¥—à–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞."
                await message.answer(error_text)
                return
            
            lang = user.get('language', 'uz')
            logger.info(f"Junior Manager {user['id']} starting connection request creation")
            
            # Import the staff application creation handler
            from handlers.staff_application_creation import RoleBasedApplicationHandler
            app_handler = RoleBasedApplicationHandler()
            
            # Start application creation process
            result = await app_handler.start_application_creation(
                creator_role='junior_manager',
                creator_id=user['id'],
                application_type='connection_request'
            )
            
            if not result['success']:
                error_msg = result.get('error_message', 'Unknown error')
                if result.get('error_type') == 'permission_denied':
                    error_text = (
                        f"Ruxsat rad etildi: {error_msg}" if lang == 'uz' 
                        else f"–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω: {error_msg}"
                    )
                else:
                    error_text = (
                        f"Xatolik yuz berdi: {error_msg}" if lang == 'uz'
                        else f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error_msg}"
                    )
                await message.answer(error_text)
                return
            
            # Store creator context in FSM data
            from states.staff_application_states import StaffApplicationStates
            await state.update_data(
                creator_context=result['creator_context'],
                application_type='connection_request'
            )
            
            # Set initial state and prompt for client selection
            await state.set_state(StaffApplicationStates.selecting_client_search_method)
            
            prompt_text = (
                "üîå Ulanish arizasi yaratish\n\n"
                "Mijozni qanday qidirishni xohlaysiz?\n\n"
                "üì± Telefon raqami bo'yicha\n"
                "üë§ Ism bo'yicha\n"
                "üÜî Mijoz ID bo'yicha\n"
                "‚ûï Yangi mijoz yaratish"
            ) if lang == 'uz' else (
                "üîå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ\n\n"
                "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞?\n\n"
                "üì± –ü–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
                "üë§ –ü–æ –∏–º–µ–Ω–∏\n"
                "üÜî –ü–æ ID –∫–ª–∏–µ–Ω—Ç–∞\n"
                "‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"
            )
            
            # Create inline keyboard for client search options
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üì± Telefon" if lang == 'uz' else "üì± –¢–µ–ª–µ—Ñ–æ–Ω",
                        callback_data="jm_client_search_phone"
                    ),
                    InlineKeyboardButton(
                        text="üë§ Ism" if lang == 'uz' else "üë§ –ò–º—è",
                        callback_data="jm_client_search_name"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üÜî ID" if lang == 'uz' else "üÜî ID",
                        callback_data="jm_client_search_id"
                    ),
                    InlineKeyboardButton(
                        text="‚ûï Yangi" if lang == 'uz' else "‚ûï –ù–æ–≤—ã–π",
                        callback_data="jm_client_search_new"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚ùå Bekor qilish" if lang == 'uz' else "‚ùå –û—Ç–º–µ–Ω–∞",
                        callback_data="jm_cancel_application_creation"
                    )
                ]
            ])
            
            await message.answer(prompt_text, reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"Error in junior_manager_create_connection_application: {e}", exc_info=True)
            lang = await get_user_lang(message.from_user.id)
            error_text = "Xatolik yuz berdi" if lang == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"
            await message.answer(error_text)

    # Technical service creation is not allowed for junior managers
    @router.message(F.text.in_(["üîß Texnik xizmat yaratish", "üîß –°–æ–∑–¥–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∑–∞—è–≤–∫—É"]))
    async def junior_manager_technical_service_denied(message: Message, state: FSMContext):
        """Handle junior manager attempting to create technical service (denied)"""
        try:
            user = await get_user_by_telegram_id(message.from_user.id)
            if not user or user['role'] != 'junior_manager':
                return
            
            lang = user.get('language', 'uz')
            logger.warning(f"Junior Manager {user['id']} attempted to create technical service (denied)")
            
            # Junior managers cannot create technical service requests
            denied_text = (
                "‚ùå Ruxsat rad etildi\n\n"
                "Kichik menejerlar faqat ulanish arizalarini yarata oladi.\n"
                "Texnik xizmat arizalarini yaratish uchun menejer yoki controller bilan bog'laning."
            ) if lang == 'uz' else (
                "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω\n\n"
                "–ú–ª–∞–¥—à–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.\n"
                "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫ –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É –∏–ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—É."
            )
            
            await message.answer(denied_text)
            
        except Exception as e:
            logger.error(f"Error in junior_manager_technical_service_denied: {e}", exc_info=True)

    return router 