from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

from database.warehouse_queries import (
    get_warehouse_user_by_telegram_id, get_all_inventory_items, 
    add_new_inventory_item, update_inventory_item_data,
    search_inventory_items, get_low_stock_inventory_items,
    get_out_of_stock_items, update_inventory_quantity
)
from keyboards.warehouse_buttons import (
    inventory_menu, inventory_detailed_list_menu, inventory_actions_keyboard
)
from states.warehouse_states import WarehouseStates
from utils.logger import logger

router = Router()

@router.message(F.text.in_(["üì¶ Inventarizatsiya boshqaruvi", "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–µ–π"]))
async def inventory_management_handler(message: Message, state: FSMContext):
    """Handle inventory management"""
    try:
        user = await get_warehouse_user_by_telegram_id(message.from_user.id)
        if not user:
            return
        
        lang = user.get('language', 'uz')
        inventory_text = "üì¶ Inventarizatsiya boshqaruvi" if lang == 'uz' else "üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–µ–π"
        
        await message.answer(
            inventory_text,
            reply_markup=inventory_detailed_list_menu(lang)
        )
        await state.set_state(WarehouseStates.inventory_menu)
        
    except Exception as e:
        logger.error(f"Error in inventory management: {str(e)}")

@router.callback_query(F.data == "view_inventory_list")
async def view_inventory_list(callback: CallbackQuery, state: FSMContext):
    """View complete inventory list"""
    try:
        user = await get_warehouse_user_by_telegram_id(callback.from_user.id)
        lang = user.get('language', 'uz')
        
        items = await get_all_inventory_items()
        
        if items:
            inventory_text = "üìã Inventar ro'yxati:" if lang == 'uz' else "üìã –°–ø–∏—Å–æ–∫ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:"
            text = f"{inventory_text}\n\n"
            
            for item in items:
                status_icon = "‚úÖ" if item['quantity'] > item.get('min_quantity', 0) else "‚ö†Ô∏è"
                text += f"{status_icon} **{item['name']}**\n"
                text += f"   üì¶ Miqdor: {item['quantity']} {item.get('unit', 'dona')}\n"
                text += f"   üí∞ Narx: {item.get('price', 0):,} so'm\n"
                if item.get('min_quantity'):
                    text += f"   ‚ö†Ô∏è Min: {item['min_quantity']}\n"
                if item.get('category'):
                    text += f"   üè∑Ô∏è Kategoriya: {item['category']}\n"
                text += "\n"
                
                # Limit text length to avoid Telegram message limits
                if len(text) > 3500:
                    text += "... va boshqalar"
                    break
        else:
            text = "üì≠ Inventar ro'yxati bo'sh" if lang == 'uz' else "üì≠ –°–ø–∏—Å–æ–∫ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø—É—Å—Ç"
        
        await callback.message.edit_text(text, parse_mode="Markdown")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error viewing inventory list: {str(e)}")
        error_text = "Inventar ro'yxatini olishda xatolik" if lang == 'uz' else "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è"
        await callback.message.edit_text(error_text)
        await callback.answer()

@router.callback_query(F.data == "add_inventory_item")
async def add_inventory_item_handler(callback: CallbackQuery, state: FSMContext):
    """Start adding inventory item"""
    try:
        user = await get_warehouse_user_by_telegram_id(callback.from_user.id)
        lang = user.get('language', 'uz')
        
        await state.set_state(WarehouseStates.adding_item_name)
        text = "üìù Mahsulot nomini kiriting:" if lang == 'uz' else "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:"
        await callback.message.edit_text(text)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in add inventory item: {str(e)}")

@router.message(StateFilter(WarehouseStates.adding_item_name))
async def get_item_name(message: Message, state: FSMContext):
    """Get item name for new inventory item"""
    try:
        user = await get_warehouse_user_by_telegram_id(message.from_user.id)
        lang = user.get('language', 'uz')
        
        await state.update_data(item_name=message.text)
        await state.set_state(WarehouseStates.adding_item_quantity)
        text = "üî¢ Miqdorni kiriting:" if lang == 'uz' else "üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:"
        await message.answer(text)
        
    except Exception as e:
        logger.error(f"Error getting item name: {str(e)}")

@router.message(StateFilter(WarehouseStates.adding_item_quantity))
async def get_item_quantity(message: Message, state: FSMContext):
    """Get item quantity for new inventory item"""
    try:
        user = await get_warehouse_user_by_telegram_id(message.from_user.id)
        lang = user.get('language', 'uz')
        
        try:
            quantity = int(message.text)
            if quantity < 0:
                raise ValueError("Negative quantity")
                
            await state.update_data(item_quantity=quantity)
            await state.set_state(WarehouseStates.adding_item_price)
            text = "üí∞ Narxni kiriting (so'm):" if lang == 'uz' else "üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (—Å—É–º):"
            await message.answer(text)
            
        except ValueError:
            text = "‚ùå Noto'g'ri miqdor. Musbat raqam kiriting." if lang == 'uz' else "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ."
            await message.answer(text)
            
    except Exception as e:
        logger.error(f"Error getting item quantity: {str(e)}")

@router.message(StateFilter(WarehouseStates.adding_item_price))
async def get_item_price(message: Message, state: FSMContext):
    """Get item price and save item"""
    try:
        user = await get_warehouse_user_by_telegram_id(message.from_user.id)
        lang = user.get('language', 'uz')
        
        try:
            price = float(message.text)
            if price < 0:
                raise ValueError("Negative price")
                
            data = await state.get_data()
            
            item_data = {
                'name': data['item_name'],
                'quantity': data['item_quantity'],
                'price': price,
                'added_by': user['id'],
                'category': 'general',
                'unit': 'dona'
            }
            
            item_id = await add_new_inventory_item(item_data)
            
            if item_id:
                success_text = f"‚úÖ Mahsulot muvaffaqiyatli qo'shildi!\n\n"
                success_text += f"üì¶ Nom: {item_data['name']}\n"
                success_text += f"üî¢ Miqdor: {item_data['quantity']}\n"
                success_text += f"üí∞ Narx: {item_data['price']:,} so'm"
                
                if lang == 'ru':
                    success_text = f"‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                    success_text += f"üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ: {item_data['name']}\n"
                    success_text += f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item_data['quantity']}\n"
                    success_text += f"üí∞ –¶–µ–Ω–∞: {item_data['price']:,} —Å—É–º"
                
                await message.answer(success_text)
                logger.info(f"Inventory item added by warehouse user {user['id']}: {item_data}")
            else:
                error_text = "‚ùå Mahsulot qo'shishda xatolik" if lang == 'uz' else "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞"
                await message.answer(error_text)
            
            await state.set_state(WarehouseStates.main_menu)
            
        except ValueError:
            text = "‚ùå Noto'g'ri narx. Musbat raqam kiriting." if lang == 'uz' else "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ."
            await message.answer(text)
            
    except Exception as e:
        logger.error(f"Error getting item price: {str(e)}")

@router.callback_query(F.data == "update_inventory_item")
async def update_inventory_item_handler(callback: CallbackQuery, state: FSMContext):
    """Start updating inventory item"""
    try:
        user = await get_warehouse_user_by_telegram_id(callback.from_user.id)
        lang = user.get('language', 'uz')
        
        items = await get_all_inventory_items()
        
        if items:
            text = "üîÑ Yangilanadigan mahsulotni tanlang:\n\n" if lang == 'uz' else "üîÑ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n\n"
            
            for i, item in enumerate(items[:10], 1):  # Show first 10 items
                text += f"{i}. **{item['name']}** (Miqdor: {item['quantity']})\n"
            
            text += f"\nüìù Mahsulot raqamini kiriting:" if lang == 'uz' else f"\nüìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞:"
            
            await callback.message.edit_text(text, parse_mode="Markdown")
            await state.update_data(available_items=items)
            await state.set_state(WarehouseStates.selecting_item_to_update)
        else:
            text = "üì≠ Yangilanadigan mahsulotlar yo'q" if lang == 'uz' else "üì≠ –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
            await callback.message.edit_text(text)
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in update inventory item: {str(e)}")

@router.message(StateFilter(WarehouseStates.selecting_item_to_update))
async def select_item_to_update(message: Message, state: FSMContext):
    """Select item to update"""
    try:
        user = await get_warehouse_user_by_telegram_id(message.from_user.id)
        lang = user.get('language', 'uz')
        
        try:
            item_number = int(message.text)
            data = await state.get_data()
            items = data.get('available_items', [])
            
            if 1 <= item_number <= len(items):
                selected_item = items[item_number - 1]
                await state.update_data(selected_item=selected_item)
                
                text = f"üì¶ **Tanlangan mahsulot:** {selected_item['name']}\n"
                text += f"üî¢ **Joriy miqdor:** {selected_item['quantity']}\n"
                text += f"üí∞ **Joriy narx:** {selected_item.get('price', 0):,} so'm\n\n"
                text += "üî¢ Yangi miqdorni kiriting:"
                
                if lang == 'ru':
                    text = f"üì¶ **–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä:** {selected_item['name']}\n"
                    text += f"üî¢ **–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {selected_item['quantity']}\n"
                    text += f"üí∞ **–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:** {selected_item.get('price', 0):,} —Å—É–º\n\n"
                    text += "üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:"
                
                await message.answer(text, parse_mode="Markdown")
                await state.set_state(WarehouseStates.updating_item_quantity)
            else:
                text = "‚ùå Noto'g'ri raqam. Qaytadan kiriting." if lang == 'uz' else "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞."
                await message.answer(text)
                
        except ValueError:
            text = "‚ùå Noto'g'ri format. Raqam kiriting." if lang == 'uz' else "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ."
            await message.answer(text)
            
    except Exception as e:
        logger.error(f"Error selecting item to update: {str(e)}")

@router.message(StateFilter(WarehouseStates.updating_item_quantity))
async def update_item_quantity(message: Message, state: FSMContext):
    """Update item quantity"""
    try:
        user = await get_warehouse_user_by_telegram_id(message.from_user.id)
        lang = user.get('language', 'uz')
        
        try:
            new_quantity = int(message.text)
            if new_quantity < 0:
                raise ValueError("Negative quantity")
                
            data = await state.get_data()
            selected_item = data.get('selected_item')
            
            if selected_item:
                success = await update_inventory_item_data(selected_item['id'], {'quantity': new_quantity})
                
                if success:
                    success_text = f"‚úÖ Mahsulot miqdori yangilandi!\n\n"
                    success_text += f"üì¶ **Mahsulot:** {selected_item['name']}\n"
                    success_text += f"üî¢ **Eski miqdor:** {selected_item['quantity']}\n"
                    success_text += f"üî¢ **Yangi miqdor:** {new_quantity}"
                    
                    if lang == 'ru':
                        success_text = f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
                        success_text += f"üì¶ **–¢–æ–≤–∞—Ä:** {selected_item['name']}\n"
                        success_text += f"üî¢ **–°—Ç–∞—Ä–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {selected_item['quantity']}\n"
                        success_text += f"üî¢ **–ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:** {new_quantity}"
                    
                    await message.answer(success_text, parse_mode="Markdown")
                    logger.info(f"Inventory item {selected_item['id']} updated by warehouse user {user['id']}")
                else:
                    error_text = "‚ùå Yangilashda xatolik" if lang == 'uz' else "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏"
                    await message.answer(error_text)
            
            await state.set_state(WarehouseStates.main_menu)
            
        except ValueError:
            text = "‚ùå Noto'g'ri miqdor. Musbat raqam kiriting." if lang == 'uz' else "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ."
            await message.answer(text)
            
    except Exception as e:
        logger.error(f"Error updating item quantity: {str(e)}")

@router.callback_query(F.data == "low_stock_report")
async def low_stock_report_handler(callback: CallbackQuery, state: FSMContext):
    """Show low stock report"""
    try:
        user = await get_warehouse_user_by_telegram_id(callback.from_user.id)
        lang = user.get('language', 'uz')
        
        low_stock_items = await get_low_stock_inventory_items()
        
        if low_stock_items:
            report_text = "‚ö†Ô∏è Kam zaxira hisoboti:" if lang == 'uz' else "‚ö†Ô∏è –û—Ç—á–µ—Ç –æ –Ω–∏–∑–∫–æ–º –∑–∞–ø–∞—Å–µ:"
            text = f"{report_text}\n\n"
            
            for item in low_stock_items:
                text += f"üî¥ **{item['name']}**\n"
                text += f"   üì¶ Joriy: {item['quantity']} {item.get('unit', 'dona')}\n"
                text += f"   ‚ö†Ô∏è Minimal: {item.get('min_quantity', 0)}\n"
                shortage = item.get('min_quantity', 0) - item['quantity']
                if shortage > 0:
                    text += f"   üìâ Kamomad: {shortage}\n"
                text += "\n"
        else:
            text = "‚úÖ Kam zaxira mahsulotlari yo'q" if lang == 'uz' else "‚úÖ –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –∑–∞–ø–∞—Å–æ–º"
        
        await callback.message.edit_text(text, parse_mode="Markdown")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in low stock report: {str(e)}")
        error_text = "Hisobotni olishda xatolik" if lang == 'uz' else "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞"
        await callback.message.edit_text(error_text)
        await callback.answer()

@router.callback_query(F.data == "inventory_search")
async def inventory_search_handler(callback: CallbackQuery, state: FSMContext):
    """Start inventory search"""
    try:
        user = await get_warehouse_user_by_telegram_id(callback.from_user.id)
        lang = user.get('language', 'uz')
        
        await state.set_state(WarehouseStates.searching_inventory)
        search_text = "üîç Qidiruv so'zini kiriting:" if lang == 'uz' else "üîç –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:"
        await callback.message.edit_text(search_text)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in inventory search: {str(e)}")

@router.message(StateFilter(WarehouseStates.searching_inventory))
async def process_inventory_search(message: Message, state: FSMContext):
    """Process inventory search"""
    try:
        user = await get_warehouse_user_by_telegram_id(message.from_user.id)
        lang = user.get('language', 'uz')
        search_query = message.text.strip()
        
        found_items = await search_inventory_items(search_query)
        
        if found_items:
            search_results_text = "üîç Qidiruv natijalari:" if lang == 'uz' else "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:"
            text = f"{search_results_text}\n\n"
            
            for item in found_items:
                status_icon = "‚úÖ" if item['quantity'] > 0 else "‚ùå"
                text += f"{status_icon} **{item['name']}**\n"
                text += f"   üì¶ Miqdor: {item['quantity']} {item.get('unit', 'dona')}\n"
                text += f"   üí∞ Narx: {item.get('price', 0):,} so'm\n"
                if item.get('description'):
                    text += f"   üìù Tavsif: {item['description']}\n"
                text += "\n"
        else:
            text = "‚ùå Hech narsa topilmadi" if lang == 'uz' else "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        
        await message.answer(text, parse_mode="Markdown")
        await state.set_state(WarehouseStates.main_menu)
        
    except Exception as e:
        logger.error(f"Error in inventory search: {str(e)}")
        error_text = "Qidirishda xatolik" if lang == 'uz' else "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ"
        await message.answer(error_text)
        await state.set_state(WarehouseStates.main_menu)

@router.callback_query(F.data == "inventory_out_of_stock")
async def inventory_out_of_stock_handler(callback: CallbackQuery, state: FSMContext):
    """Show out of stock items"""
    try:
        user = await get_warehouse_user_by_telegram_id(callback.from_user.id)
        lang = user.get('language', 'uz')
        
        out_of_stock_items = await get_out_of_stock_items()
        
        if out_of_stock_items:
            out_of_stock_text = "‚ùå Tugagan mahsulotlar:" if lang == 'uz' else "‚ùå –ó–∞–∫–æ–Ω—á–∏–≤—à–∏–µ—Å—è —Ç–æ–≤–∞—Ä—ã:"
            text = f"{out_of_stock_text}\n\n"
            
            for item in out_of_stock_items:
                text += f"üî¥ **{item['name']}**\n"
                text += f"   üì¶ Miqdor: 0 {item.get('unit', 'dona')}\n"
                text += f"   üí∞ Narx: {item.get('price', 0):,} so'm\n"
                if item.get('min_quantity'):
                    text += f"   ‚ö†Ô∏è Kerakli: {item['min_quantity']}\n"
                text += "\n"
        else:
            text = "‚úÖ Tugagan mahsulotlar yo'q" if lang == 'uz' else "‚úÖ –ù–µ—Ç –∑–∞–∫–æ–Ω—á–∏–≤—à–∏—Ö—Å—è —Ç–æ–≤–∞—Ä–æ–≤"
        
        await callback.message.edit_text(text, parse_mode="Markdown")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error getting out of stock items: {str(e)}")
        error_text = "Ma'lumotlarni olishda xatolik" if lang == 'uz' else "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö"
        await callback.message.edit_text(error_text)
        await callback.answer()
