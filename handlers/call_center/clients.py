from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

from database.base_queries import get_user_by_telegram_id
from database.call_center_queries import (
    search_clients, get_client_history, update_client_info
)
from keyboards.call_center_buttons import client_search_menu
from states.call_center import CallCenterStates
from utils.logger import logger

def get_call_center_clients_router():
    router = Router()

    @router.message(F.text.in_(["üîç Mijoz qidirish", "ÔøΩÔøΩ –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞"]))
    async def reply_client_search(message: Message, state: FSMContext):
        """Client search from reply keyboard"""
        user = await get_user_by_telegram_id(message.from_user.id)
        if not user or user['role'] != 'call_center':
            lang = user.get('language', 'uz') if user else 'uz'
            text = "Sizda ruxsat yo'q." if lang == 'uz' else "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞."
            await message.answer(text)
            return
        
        await state.set_state(CallCenterStates.client_search)
        lang = user.get('language', 'uz')
        text = "üîç Qidiruv so'rovini kiriting (ism, telefon raqam):" if lang == 'uz' else "üîç –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–∏–º—è, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞):"
        await message.answer(
            text,
            reply_markup=client_search_menu(user['language'])
        )

    @router.callback_query(F.data == "client_search")
    async def client_search(callback: CallbackQuery, state: FSMContext):
        """Client search menu"""
        user = await get_user_by_telegram_id(callback.from_user.id)
        if not user or user['role'] != 'call_center':
            await callback.answer("Access denied", show_alert=True)
            return
        
        lang = user.get('language', 'uz')
        
        await state.set_state(CallCenterStates.client_search)
        text = "üîç Qidiruv so'rovini kiriting (ism, telefon raqam):" if lang == 'uz' else "üîç –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–∏–º—è, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞):"
        await callback.message.edit_text(
            text,
            reply_markup=client_search_menu(user['language'])
        )

    @router.message(StateFilter(CallCenterStates.client_search))
    async def search_client(message: Message, state: FSMContext):
        """Search for client"""
        user = await get_user_by_telegram_id(message.from_user.id)
        lang = user.get('language', 'uz')
        query = message.text.strip()
        
        if len(query) < 3:
            text = "‚ùå Qidiruv so'rovi kamida 3 ta belgidan iborat bo'lishi kerak." if lang == 'uz' else "‚ùå –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞."
            await message.answer(text)
            return
        
        try:
            clients = await search_clients(query)
            
            if clients:
                results_text = "üîç Qidiruv natijalari:" if lang == 'uz' else "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:"
                text = f"{results_text}\n\n"
                
                for i, client in enumerate(clients[:10], 1):  # Limit to 10 results
                    text += f"{i}. üë§ {client['full_name']}\n"
                    text += f"   üìû {client['phone_number']}\n"
                    if client.get('address'):
                        text += f"   üìç {client['address']}\n"
                    
                    # Show recent orders count
                    from database.call_center_queries import get_orders_by_client
                    orders = await get_orders_by_client(client['id'], limit=1)
                    orders_count_text = "buyurtmalar" if lang == 'uz' else "–∑–∞–∫–∞–∑–æ–≤"
                    text += f"   üìã {len(orders)} {orders_count_text}\n\n"
                    
                    # Store client info for potential selection
                    await state.update_data({f'client_{i}': client['id']})
                
                select_text = "Mijozni tanlash uchun raqamini yuboring (1-10)" if lang == 'uz' else "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞ (1-10)"
                text += f"üìå {select_text}"
                
                await state.set_state(CallCenterStates.client_details)
                
            else:
                text = "‚ùå Mijozlar topilmadi." if lang == 'uz' else "‚ùå –ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
            
            await message.answer(text)
            
        except Exception as e:
            logger.error(f"Error searching clients: {str(e)}")
            error_text = "Xatolik yuz berdi" if lang == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"
            await message.answer(error_text)

    @router.message(StateFilter(CallCenterStates.client_details))
    async def select_client_by_number(message: Message, state: FSMContext):
        """Select client by number from search results"""
        user = await get_user_by_telegram_id(message.from_user.id)
        lang = user.get('language', 'uz')
        
        try:
            client_num = int(message.text.strip())
            if not 1 <= client_num <= 10:
                raise ValueError("Invalid number")
            
            data = await state.get_data()
            client_id = data.get(f'client_{client_num}')
            
            if not client_id:
                text = "‚ùå Noto'g'ri raqam." if lang == 'uz' else "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä."
                await message.answer(text)
                return
            
            # Get detailed client history
            client_history = await get_client_history(client_id)
            
            if not client_history:
                text = "‚ùå Mijoz ma'lumotlari topilmadi." if lang == 'uz' else "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
                await message.answer(text)
                return
            
            client = client_history['client']
            orders = client_history['orders']
            calls = client_history['calls']
            feedback = client_history['feedback']
            
            # Format client details
            details_text = "üë§ Mijoz ma'lumotlari:" if lang == 'uz' else "üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ:"
            text = f"{details_text}\n\n"
            text += f"üìõ {client['full_name']}\n"
            text += f"üìû {client['phone_number']}\n"
            if client.get('address'):
                text += f"üìç {client['address']}\n"
            text += f"üìÖ Ro'yxatdan o'tgan: {client['created_at'].strftime('%d.%m.%Y')}\n"
            
            # Orders summary
            if orders:
                orders_text = "üìã Buyurtmalar:" if lang == 'uz' else "üìã –ó–∞–∫–∞–∑—ã:"
                text += f"\n{orders_text}\n"
                for order in orders[:5]:
                    status_emoji = "‚úÖ" if order['status'] == 'completed' else "‚è≥" if order['status'] in ['new', 'pending'] else "üîß"
                    text += f"{status_emoji} {order.get('zayavka_type', 'Xizmat')} - {order['status']}\n"
                    text += f"   üìÖ {order['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
            
            # Calls summary
            if calls:
                calls_text = "üìû Qo'ng'iroqlar:" if lang == 'uz' else "üìû –ó–≤–æ–Ω–∫–∏:"
                text += f"\n{calls_text}\n"
                for call in calls[:3]:
                    result_emoji = "‚úÖ" if call['result'] == 'order_created' else "üìû"
                    text += f"{result_emoji} {call['result']} - {call['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
            
            # Feedback summary
            if feedback:
                feedback_text = "‚≠ê Baholash:" if lang == 'uz' else "‚≠ê –û—Ü–µ–Ω–∫–∏:"
                text += f"\n{feedback_text}\n"
                avg_rating = sum(f['rating'] for f in feedback) / len(feedback)
                text += f"‚≠ê O'rtacha: {avg_rating:.1f}/5 ({len(feedback)} ta baholash)\n"
            
            await state.update_data(selected_client_id=client_id)
            await state.set_state(CallCenterStates.client_history)
            await message.answer(text)
            
        except ValueError:
            text = "‚ùå Iltimos, 1 dan 10 gacha raqam kiriting." if lang == 'uz' else "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10."
            await message.answer(text)
        except Exception as e:
            logger.error(f"Error getting client details: {str(e)}")
            error_text = "Xatolik yuz berdi" if lang == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"
            await message.answer(error_text)

    @router.message(StateFilter(CallCenterStates.client_history))
    async def handle_client_actions(message: Message, state: FSMContext):
        """Handle actions on selected client"""
        user = await get_user_by_telegram_id(message.from_user.id)
        lang = user.get('language', 'uz')
        action = message.text.strip().lower()
        
        data = await state.get_data()
        client_id = data.get('selected_client_id')
        
        if not client_id:
            text = "‚ùå Mijoz tanlanmagan." if lang == 'uz' else "‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω."
            await message.answer(text)
            return
        
        try:
            if action in ['yangi buyurtma', '–Ω–æ–≤—ã–π –∑–∞–∫–∞–∑', 'order']:
                # Start new order for this client
                await state.update_data(client_id=client_id)
                await state.set_state(CallCenterStates.select_service_type)
                
                from keyboards.call_center_buttons import order_types_keyboard
                text = "üîß Xizmat turini tanlang:" if lang == 'uz' else "üîß –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å–ª—É–≥–∏:"
                await message.answer(
                    text,
                    reply_markup=order_types_keyboard(user['language'])
                )
                
            elif action in ['chat', '—á–∞—Ç']:
                # Start chat with client
                await state.update_data(client_id=client_id)
                await state.set_state(CallCenterStates.in_chat)
                
                text = "üí¨ Chat boshlandi. Xabaringizni yuboring:" if lang == 'uz' else "üí¨ –ß–∞—Ç –Ω–∞—á–∞—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:"
                await message.answer(text)
                
            else:
                help_text = "Mavjud amallar:" if lang == 'uz' else "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:"
                text = f"{help_text}\n"
                text += "‚Ä¢ 'yangi buyurtma' - yangi buyurtma yaratish\n" if lang == 'uz' else "‚Ä¢ '–Ω–æ–≤—ã–π –∑–∞–∫–∞–∑' - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑\n"
                text += "‚Ä¢ 'chat' - mijoz bilan chat boshlash" if lang == 'uz' else "‚Ä¢ '—á–∞—Ç' - –Ω–∞—á–∞—Ç—å —á–∞—Ç —Å –∫–ª–∏–µ–Ω—Ç–æ–º"
                await message.answer(text)
                
        except Exception as e:
            logger.error(f"Error handling client action: {str(e)}")
            error_text = "Xatolik yuz berdi" if lang == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"
            await message.answer(error_text)

    return router
