from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from utils.inline_cleanup import answer_and_cleanup, safe_delete_message
from keyboards.manager_buttons import get_notifications_keyboard, get_manager_main_keyboard
from states.manager_states import ManagerStates
from database.manager_queries import get_users_by_role
from database.base_queries import get_user_by_telegram_id, get_user_by_id
from database.base_queries import get_user_lang
from utils.logger import setup_logger

def get_manager_notifications_router():
    logger = setup_logger('bot.manager.notifications')
    router = Router()

    @router.message(F.text.in_(['üîî Bildirishnomalar', 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è']))
    async def show_notifications_menu(message: Message, state: FSMContext):
        """Show notifications menu"""
        try:
            await safe_delete_message(message.bot, message.chat.id, message.message_id)
            user = await get_user_by_telegram_id(message.from_user.id)
            if not user or user['role'] != 'manager':
                return
            
            lang = user.get('language', 'uz')
            notifications_text = "üîî Bildirishnomalar:" if lang == 'uz' else "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:"
            
            await message.answer(
                notifications_text,
                reply_markup=get_notifications_keyboard(lang)
            )
            
        except Exception as e:
            logger.error(f"Error in show_notifications_menu: {str(e)}", exc_info=True)
            lang = await get_user_lang(message.from_user.id)
            error_text = "Xatolik yuz berdi" if lang == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"
            await message.answer(error_text)

    @router.callback_query(F.data.startswith("notification_"))
    async def handle_notification_action(callback: CallbackQuery, state: FSMContext):
        """Handle notification actions"""
        try:
            await answer_and_cleanup(callback, cleanup_after=True)
            action = callback.data.replace("notification_", "")
            
            user = await get_user_by_telegram_id(callback.from_user.id)
            lang = user.get('language', 'uz')
            
            if action == "send_all":
                await start_send_notification_all(callback, state, lang)
            elif action == "send_role":
                await start_send_notification_role(callback, state, lang)
            elif action == "send_individual":
                await start_send_notification_individual(callback, state, lang)
            elif action == "history":
                await show_notification_history(callback, lang)
            else:
                unknown_text = "Noma'lum amal" if lang == 'uz' else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
                await callback.message.edit_text(unknown_text)
            
            await callback.answer()
            
        except Exception as e:
            logger.error(f"Error in handle_notification_action: {str(e)}", exc_info=True)
            await callback.answer("Xatolik yuz berdi", show_alert=True)

    async def start_send_notification_all(callback, state, lang):
        """Start sending notification to all users"""
        try:
            message_text = (
                "üì¢ Barcha foydalanuvchilarga xabar yuborish:\n\n"
                "Xabar matnini kiriting:"
                if lang == 'uz' else
                "üì¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n\n"
                "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:"
            )
            
            await callback.message.edit_text(message_text)
            await state.update_data(notification_type="all")
            await state.set_state(ManagerStates.sending_notification_message)
            
        except Exception as e:
            logger.error(f"Error in start_send_notification_all: {str(e)}", exc_info=True)

    async def start_send_notification_role(callback, state, lang):
        """Start sending notification to specific role"""
        try:
            role_buttons = [
                [InlineKeyboardButton(
                    text="üë®‚Äçüîß Texniklar" if lang == 'uz' else "üë®‚Äçüîß –¢–µ—Ö–Ω–∏–∫–∏",
                    callback_data="select_role_technician"
                )],
                [InlineKeyboardButton(
                    text="üë®‚Äçüíº Menejerlar" if lang == 'uz' else "üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä—ã",
                    callback_data="select_role_manager"
                )],
                [InlineKeyboardButton(
                    text="üìû Call center" if lang == 'uz' else "üìû Call center",
                    callback_data="select_role_call_center"
                )],
                [InlineKeyboardButton(
                    text="üì¶ Ombor" if lang == 'uz' else "üì¶ –°–∫–ª–∞–¥",
                    callback_data="select_role_warehouse"
                )],
                [InlineKeyboardButton(
                    text="üë§ Mijozlar" if lang == 'uz' else "üë§ –ö–ª–∏–µ–Ω—Ç—ã",
                    callback_data="select_role_client"
                )],
                [InlineKeyboardButton(
                    text="‚ùå Bekor qilish" if lang == 'uz' else "‚ùå –û—Ç–º–µ–Ω–∞",
                    callback_data="cancel_notification"
                )]
            ]
            
            role_text = (
                "üë• Qaysi guruhga xabar yubormoqchisiz?"
                if lang == 'uz' else
                "üë• –ö–∞–∫–æ–π –≥—Ä—É–ø–ø–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ?"
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=role_buttons)
            await callback.message.edit_text(role_text, reply_markup=keyboard)
            await state.update_data(notification_type="role")
            
        except Exception as e:
            logger.error(f"Error in start_send_notification_role: {str(e)}", exc_info=True)

    @router.callback_query(F.data.startswith("select_role_"))
    async def select_notification_role(callback: CallbackQuery, state: FSMContext):
        """Select role for notification"""
        try:
            await answer_and_cleanup(callback, cleanup_after=True)
            role = callback.data.replace("select_role_", "")
            
            user = await get_user_by_telegram_id(callback.from_user.id)
            lang = user.get('language', 'uz')
            
            role_names = {
                'technician': {'uz': 'Texniklar', 'ru': '–¢–µ—Ö–Ω–∏–∫–∏'},
                'manager': {'uz': 'Menejerlar', 'ru': '–ú–µ–Ω–µ–¥–∂–µ—Ä—ã'},
                'call_center': {'uz': 'Call center', 'ru': 'Call center'},
                'warehouse': {'uz': 'Ombor', 'ru': '–°–∫–ª–∞–¥'},
                'client': {'uz': 'Mijozlar', 'ru': '–ö–ª–∏–µ–Ω—Ç—ã'}
            }
            
            role_name = role_names.get(role, {}).get(lang, role)
            
            message_text = (
                f"üì¢ {role_name}ga xabar yuborish:\n\n"
                f"Xabar matnini kiriting:"
                if lang == 'uz' else
                f"ÔøΩÔøΩ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø–µ {role_name}:\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:"
            )
            
            await callback.message.edit_text(message_text)
            await state.update_data(notification_type="role", selected_role=role)
            await state.set_state(ManagerStates.sending_notification_message)
            await callback.answer()
            
        except Exception as e:
            logger.error(f"Error in select_notification_role: {str(e)}", exc_info=True)
            await callback.answer("Xatolik yuz berdi", show_alert=True)

    async def start_send_notification_individual(callback, state, lang):
        """Start sending notification to individual user"""
        try:
            message_text = (
                "üë§ Shaxsiy xabar yuborish:\n\n"
                "Foydalanuvchi ID raqamini kiriting:"
                if lang == 'uz' else
                "üë§ –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n"
                "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
            )
            
            await callback.message.edit_text(message_text)
            await state.update_data(notification_type="individual")
            await state.set_state(ManagerStates.sending_notification_user_id)
            
        except Exception as e:
            logger.error(f"Error in start_send_notification_individual: {str(e)}", exc_info=True)

    @router.message(StateFilter(ManagerStates.sending_notification_user_id))
    async def get_notification_user_id(message: Message, state: FSMContext):
        """Get user ID for individual notification"""
        try:
            await safe_delete_message(message.bot, message.chat.id, message.message_id)
            user_id = int(message.text.strip())
            
            # Check if user exists
            conn = await bot.db.acquire()
            try:
                target_user = await conn.fetchrow(
                    'SELECT * FROM users WHERE id = $1',
                    user_id
                )
                
                if not target_user:
                    user = await get_user_by_telegram_id(message.from_user.id)
                    lang = user.get('language', 'uz')
                    not_found_text = f"‚ùå ID {user_id} bilan foydalanuvchi topilmadi." if lang == 'uz' else f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω."
                    await message.answer(not_found_text)
                    return
                
                await state.update_data(target_user_id=user_id)
                
                user = await get_user_by_telegram_id(message.from_user.id)
                lang = user.get('language', 'uz')
                
                message_text = (
                    f"üë§ {target_user['full_name']}ga xabar yuborish:\n\n"
                    f"Xabar matnini kiriting:"
                    if lang == 'uz' else
                    f"üë§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user['full_name']}:\n\n"
                    f"–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:"
                )
                
                await message.answer(message_text)
                await state.set_state(ManagerStates.sending_notification_message)
                
            finally:
                await conn.release()
            
        except ValueError:
            user = await get_user_by_telegram_id(message.from_user.id)
            lang = user.get('language', 'uz')
            invalid_text = "‚ùå Noto'g'ri format. Faqat raqam kiriting." if lang == 'uz' else "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ."
            await message.answer(invalid_text)
        except Exception as e:
            logger.error(f"Error in get_notification_user_id: {str(e)}", exc_info=True)
            lang = await get_user_lang(message.from_user.id)
            error_text = "Xatolik yuz berdi" if lang == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"
            await message.answer(error_text)

    @router.message(StateFilter(ManagerStates.sending_notification_message))
    async def get_notification_message(message: Message, state: FSMContext):
        """Get notification message and send it"""
        try:
            await safe_delete_message(message.bot, message.chat.id, message.message_id)
            notification_text = message.text
            data = await state.get_data()
            notification_type = data.get('notification_type')
            
            user = await get_user_by_telegram_id(message.from_user.id)
            lang = user.get('language', 'uz')
            
            conn = await bot.db.acquire()
            try:
                sent_count = 0
                failed_count = 0
                
                if notification_type == "all":
                    # Send to all users with telegram_id
                    users = await conn.fetch(
                        'SELECT telegram_id FROM users WHERE telegram_id IS NOT NULL'
                    )
                    
                    for target_user in users:
                        try:
                            await message.bot.send_message(
                                chat_id=target_user['telegram_id'],
                                text=f"üì¢ <b>Umumiy xabar:</b>\n\n{notification_text}" if lang == 'uz' else f"üì¢ <b>–û–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n\n{notification_text}",
                                parse_mode='HTML'
                            )
                            sent_count += 1
                        except Exception as e:
                            logger.error(f"Failed to send notification to {target_user['telegram_id']}: {str(e)}")
                            failed_count += 1
                            
                elif notification_type == "role":
                    selected_role = data.get('selected_role')
                    users = await conn.fetch(
                        'SELECT telegram_id FROM users WHERE role = $1 AND telegram_id IS NOT NULL',
                        selected_role
                    )
                    
                    for target_user in users:
                        try:
                            await message.bot.send_message(
                                chat_id=target_user['telegram_id'],
                                text=f"üì¢ <b>Guruh xabari:</b>\n\n{notification_text}" if lang == 'uz' else f"üì¢ <b>–ì—Ä—É–ø–ø–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n\n{notification_text}",
                                parse_mode='HTML'
                            )
                            sent_count += 1
                        except Exception as e:
                            logger.error(f"Failed to send notification to {target_user['telegram_id']}: {str(e)}")
                            failed_count += 1
                            
                elif notification_type == "individual":
                    target_user_id = data.get('target_user_id')
                    target_user = await conn.fetchrow(
                        'SELECT telegram_id FROM users WHERE id = $1',
                        target_user_id
                    )
                    
                    if target_user and target_user['telegram_id']:
                        try:
                            await message.bot.send_message(
                                chat_id=target_user['telegram_id'],
                                text=f"üì¢ <b>Shaxsiy xabar:</b>\n\n{notification_text}" if lang == 'uz' else f"üì¢ <b>–õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n\n{notification_text}",
                                parse_mode='HTML'
                            )
                            sent_count = 1
                        except Exception as e:
                            logger.error(f"Failed to send notification to {target_user['telegram_id']}: {str(e)}")
                            failed_count = 1
                    else:
                        failed_count = 1
                
                # Save notification to history
                await conn.execute(
                    '''INSERT INTO notifications (sender_id, message_text, notification_type, sent_count, failed_count, created_at)
                       VALUES ($1, $2, $3, $4, $5, NOW())''',
                    user['id'], notification_text, notification_type, sent_count, failed_count
                )
                
                # Send confirmation
                if lang == 'uz':
                    result_text = (
                        f"‚úÖ <b>Xabar yuborildi!</b>\n\n"
                        f"üì§ Yuborilgan: {sent_count}\n"
                        f"‚ùå Xatolik: {failed_count}\n\n"
                        f"üìù Xabar matni:\n{notification_text}"
                    )
                else:
                    result_text = (
                        f"‚úÖ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>\n\n"
                        f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
                        f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n\n"
                        f"üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n{notification_text}"
                    )
                
                await message.answer(result_text, parse_mode='HTML')
                logger.info(f"Manager {user['id']} sent notification to {sent_count} users")
                
            finally:
                await conn.release()
            
            await state.clear()
            
        except Exception as e:
            logger.error(f"Error in get_notification_message: {str(e)}", exc_info=True)
            lang = await get_user_lang(message.from_user.id)
            error_text = "Xatolik yuz berdi" if lang == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"
            await message.answer(error_text)

    async def show_notification_history(callback, lang):
        """Show notification history"""
        try:
            conn = await bot.db.acquire()
            try:
                # Get recent notifications
                notifications = await conn.fetch(
                    '''SELECT n.*, u.full_name as sender_name
                       FROM notifications n
                       LEFT JOIN users u ON n.sender_id = u.id
                       ORDER BY n.created_at DESC
                       LIMIT 10'''
                )
                
                if not notifications:
                    no_history_text = "‚ùå Bildirishnomalar tarixi bo'sh." if lang == 'uz' else "‚ùå –ò—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—É—Å—Ç–∞."
                    await callback.message.edit_text(no_history_text)
                    return
                
                if lang == 'uz':
                    history_text = "üìã <b>Bildirishnomalar tarixi:</b>\n\n"
                    
                    for notif in notifications:
                        type_emoji = {
                            'all': 'üì¢',
                            'role': 'üë•',
                            'individual': 'üë§'
                        }.get(notif['notification_type'], 'üì¢')
                        
                        history_text += (
                            f"{type_emoji} <b>{notif.get('sender_name', 'Noma\'lum')}</b>\n"
                            f"   üìÖ {notif['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
                            f"   üì§ Yuborilgan: {notif['sent_count']}\n"
                            f"   ‚ùå Xatolik: {notif['failed_count']}\n"
                            f"   üìù {notif['message_text'][:50]}...\n\n"
                        )
                else:
                    history_text = "üìã <b>–ò—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b>\n\n"
                    
                    for notif in notifications:
                        type_emoji = {
                            'all': 'üì¢',
                            'role': 'üë•',
                            'individual': 'üë§'
                        }.get(notif['notification_type'], 'üì¢')
                        
                        history_text += (
                            f"{type_emoji} <b>{notif.get('sender_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}</b>\n"
                            f"   üìÖ {notif['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
                            f"   üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {notif['sent_count']}\n"
                            f"   ‚ùå –û—à–∏–±–æ–∫: {notif['failed_count']}\n"
                            f"   üìù {notif['message_text'][:50]}...\n\n"
                        )
                
                # Add back button
                back_button = InlineKeyboardButton(
                    text="üîô Orqaga" if lang == 'uz' else "üîô –ù–∞–∑–∞–¥",
                    callback_data="notification_menu"
                )
                keyboard = InlineKeyboardMarkup(inline_keyboard=[[back_button]])
                
                await callback.message.edit_text(history_text, reply_markup=keyboard, parse_mode='HTML')
                
            finally:
                await conn.release()
                
        except Exception as e:
            logger.error(f"Error in show_notification_history: {str(e)}", exc_info=True)
            error_text = "Xatolik yuz berdi" if lang == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"
            await callback.message.edit_text(error_text)

    @router.callback_query(F.data == "cancel_notification")
    async def cancel_notification(callback: CallbackQuery, state: FSMContext):
        """Cancel notification sending"""
        try:
            await answer_and_cleanup(callback, cleanup_after=True)
            user = await get_user_by_telegram_id(callback.from_user.id)
            lang = user.get('language', 'uz')
            
            cancel_text = "‚ùå Xabar yuborish bekor qilindi." if lang == 'uz' else "‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞."
            await callback.message.edit_text(cancel_text)
            await state.clear()
            await callback.answer()
            
        except Exception as e:
            logger.error(f"Error in cancel_notification: {str(e)}", exc_info=True)
            await callback.answer("Xatolik yuz berdi", show_alert=True)

    @router.callback_query(F.data == "notification_menu")
    async def back_to_notification_menu(callback: CallbackQuery, state: FSMContext):
        """Return to notifications menu"""
        try:
            await answer_and_cleanup(callback, cleanup_after=True)
            user = await get_user_by_telegram_id(callback.from_user.id)
            lang = user.get('language', 'uz')
            
            notifications_text = "üîî Bildirishnomalar:" if lang == 'uz' else "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:"
            
            await callback.message.edit_text(
                notifications_text,
                reply_markup=get_notifications_keyboard(lang)
            )
            await state.clear()
            await callback.answer()
            
        except Exception as e:
            logger.error(f"Error in back_to_notification_menu: {str(e)}", exc_info=True)
            await callback.answer("Xatolik yuz berdi", show_alert=True)

    return router
