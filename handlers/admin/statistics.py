from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from functools import wraps
import logging
from datetime import datetime, timedelta

from database.admin_queries import (
    is_admin, get_admin_dashboard_stats, get_performance_metrics,
    export_admin_data, log_admin_action
)
from database.base_queries import get_system_statistics, get_user_by_telegram_id, get_user_lang
from keyboards.admin_buttons import get_statistics_keyboard
from states.admin_states import AdminStates
from utils.inline_cleanup import cleanup_user_inline_messages
from utils.logger import setup_logger
from utils.role_checks import admin_only

# Setup logger
logger = setup_logger('bot.admin.statistics')

def get_admin_statistics_router():
    router = Router()

    @router.message(F.text.in_(["üìä Statistika", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]))
    @admin_only
    async def statistics_menu(message: Message, state: FSMContext):
        """Statistics main menu"""
        try:
            await cleanup_user_inline_messages(message.from_user.id)
            lang = await get_user_lang(message.from_user.id)
            
            text = "Statistika bo'limini tanlang:" if lang == 'uz' else "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:"
            
            await message.answer(
                text,
                reply_markup=get_statistics_keyboard(lang)
            )
            await state.set_state(AdminStates.statistics_menu)
            
        except Exception as e:
            logger.error(f"Error in statistics menu: {e}")
            lang = await get_user_lang(message.from_user.id)
            error_text = "Xatolik yuz berdi." if lang == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
            await message.answer(error_text)

    @router.message(F.text.in_(["üìä Umumiy statistika", "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"]))
    @admin_only
    async def general_statistics(message: Message):
        """Show general statistics"""
        try:
            await cleanup_user_inline_messages(message.from_user.id)
            lang = await get_user_lang(message.from_user.id)
            
            # Get system statistics
            stats = await get_system_statistics()
            dashboard_stats = await get_admin_dashboard_stats()
            
            if lang == 'uz':
                text = (
                    f"üìä <b>Umumiy tizim statistikasi</b>\n\n"
                    f"üë• <b>Foydalanuvchilar:</b>\n"
                    f"‚Ä¢ Jami: <b>{stats.get('active_clients', 0) + stats.get('active_technicians', 0)}</b>\n"
                    f"‚Ä¢ Mijozlar: <b>{stats.get('active_clients', 0)}</b>\n"
                    f"‚Ä¢ Texniklar: <b>{stats.get('active_technicians', 0)}</b>\n\n"
                    f"üìã <b>Zayavkalar:</b>\n"
                    f"‚Ä¢ Jami: <b>{stats.get('total_orders', 0)}</b>\n"
                    f"‚Ä¢ Bajarilgan: <b>{stats.get('completed_orders', 0)}</b>\n"
                    f"‚Ä¢ Kutilayotgan: <b>{stats.get('pending_orders', 0)}</b>\n"
                    f"‚Ä¢ Bugungi: <b>{dashboard_stats.get('today_orders', 0)}</b>\n\n"
                    f"üí∞ <b>Moliyaviy:</b>\n"
                    f"‚Ä¢ Bugungi daromad: <b>{stats.get('revenue_today', 0):,} so'm</b>\n\n"
                    f"‚è± <b>Samaradorlik:</b>\n"
                    f"‚Ä¢ O'rtacha bajarish vaqti: <b>{stats.get('avg_completion_time', 0)} soat</b>\n"
                    f"‚Ä¢ Bajarish foizi: <b>{(stats.get('completed_orders', 0) / max(stats.get('total_orders', 1), 1) * 100):.1f}%</b>"
                )
            else:
                text = (
                    f"üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
                    f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
                    f"‚Ä¢ –í—Å–µ–≥–æ: <b>{stats.get('active_clients', 0) + stats.get('active_technicians', 0)}</b>\n"
                    f"‚Ä¢ –ö–ª–∏–µ–Ω—Ç—ã: <b>{stats.get('active_clients', 0)}</b>\n"
                    f"‚Ä¢ –¢–µ—Ö–Ω–∏–∫–∏: <b>{stats.get('active_technicians', 0)}</b>\n\n"
                    f"üìã <b>–ó–∞—è–≤–∫–∏:</b>\n"
                    f"‚Ä¢ –í—Å–µ–≥–æ: <b>{stats.get('total_orders', 0)}</b>\n"
                    f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: <b>{stats.get('completed_orders', 0)}</b>\n"
                    f"‚Ä¢ –û–∂–∏–¥–∞—é—â–∏–µ: <b>{stats.get('pending_orders', 0)}</b>\n"
                    f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: <b>{dashboard_stats.get('today_orders', 0)}</b>\n\n"
                    f"üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>\n"
                    f"‚Ä¢ –î–æ—Ö–æ–¥ —Å–µ–≥–æ–¥–Ω—è: <b>{stats.get('revenue_today', 0):,} —Å—É–º</b>\n\n"
                    f"‚è± <b>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
                    f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: <b>{stats.get('avg_completion_time', 0)} —á–∞—Å–æ–≤</b>\n"
                    f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: <b>{(stats.get('completed_orders', 0) / max(stats.get('total_orders', 1), 1) * 100):.1f}%</b>"
                )
            
            # Add refresh button
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîÑ Yangilash" if lang == 'uz' else "üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                        callback_data="refresh_general_stats"
                    )
                ]
            ])
            
            await message.answer(text, reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"Error showing general statistics: {e}")
            lang = await get_user_lang(message.from_user.id)
            error_text = "Xatolik yuz berdi." if lang == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
            await message.answer(error_text)

    @router.message(F.text.in_(["üìà Samaradorlik hisoboti", "üìà –û—Ç—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"]))
    @admin_only
    async def performance_report(message: Message):
        """Show performance report"""
        try:
            await cleanup_user_inline_messages(message.from_user.id)
            lang = await get_user_lang(message.from_user.id)
            
            # Get performance metrics for different periods
            daily_metrics = await get_performance_metrics('daily')
            weekly_metrics = await get_performance_metrics('weekly')
            monthly_metrics = await get_performance_metrics('monthly')
            
            if lang == 'uz':
                text = (
                    f"üìà <b>Samaradorlik hisoboti</b>\n\n"
                    f"üìÖ <b>Bugungi ko'rsatkichlar:</b>\n"
                    f"‚Ä¢ Zayavkalar: <b>{daily_metrics.get('total_orders', 0)}</b>\n"
                    f"‚Ä¢ Bajarilgan: <b>{daily_metrics.get('completed_orders', 0)}</b>\n"
                    f"‚Ä¢ Bajarish foizi: <b>{daily_metrics.get('completion_rate', 0):.1f}%</b>\n"
                    f"‚Ä¢ O'rtacha vaqt: <b>{daily_metrics.get('avg_completion_hours', 0):.1f} soat</b>\n\n"
                    f"üìä <b>Haftalik ko'rsatkichlar:</b>\n"
                    f"‚Ä¢ Zayavkalar: <b>{weekly_metrics.get('total_orders', 0)}</b>\n"
                    f"‚Ä¢ Bajarilgan: <b>{weekly_metrics.get('completed_orders', 0)}</b>\n"
                    f"‚Ä¢ Bajarish foizi: <b>{weekly_metrics.get('completion_rate', 0):.1f}%</b>\n\n"
                    f"üìà <b>Oylik ko'rsatkichlar:</b>\n"
                    f"‚Ä¢ Zayavkalar: <b>{monthly_metrics.get('total_orders', 0)}</b>\n"
                    f"‚Ä¢ Bajarilgan: <b>{monthly_metrics.get('completed_orders', 0)}</b>\n"
                    f"‚Ä¢ Bajarish foizi: <b>{monthly_metrics.get('completion_rate', 0):.1f}%</b>\n\n"
                    f"üë• <b>Foydalanuvchi faolligi:</b>\n"
                    f"‚Ä¢ Faol foydalanuvchilar: <b>{daily_metrics.get('active_users', 0)}</b>\n"
                    f"‚Ä¢ Jami amallar: <b>{daily_metrics.get('total_actions', 0)}</b>\n\n"
                    f"‚ö° <b>Tizim yuki:</b>\n"
                    f"‚Ä¢ Kutilayotgan: <b>{daily_metrics.get('pending_load', 0)}</b>\n"
                    f"‚Ä¢ Jarayonda: <b>{daily_metrics.get('active_load', 0)}</b>"
                )
            else:
                text = (
                    f"üìà <b>–û—Ç—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏</b>\n\n"
                    f"üìÖ <b>–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å–µ–≥–æ–¥–Ω—è:</b>\n"
                    f"‚Ä¢ –ó–∞—è–≤–∫–∏: <b>{daily_metrics.get('total_orders', 0)}</b>\n"
                    f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: <b>{daily_metrics.get('completed_orders', 0)}</b>\n"
                    f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: <b>{daily_metrics.get('completion_rate', 0):.1f}%</b>\n"
                    f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: <b>{daily_metrics.get('avg_completion_hours', 0):.1f} —á–∞—Å–æ–≤</b>\n\n"
                    f"üìä <b>–ù–µ–¥–µ–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
                    f"‚Ä¢ –ó–∞—è–≤–∫–∏: <b>{weekly_metrics.get('total_orders', 0)}</b>\n"
                    f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: <b>{weekly_metrics.get('completed_orders', 0)}</b>\n"
                    f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: <b>{weekly_metrics.get('completion_rate', 0):.1f}%</b>\n\n"
                    f"üìà <b>–ú–µ—Å—è—á–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
                    f"‚Ä¢ –ó–∞—è–≤–∫–∏: <b>{monthly_metrics.get('total_orders', 0)}</b>\n"
                    f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: <b>{monthly_metrics.get('completed_orders', 0)}</b>\n"
                    f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: <b>{monthly_metrics.get('completion_rate', 0):.1f}%</b>\n\n"
                    f"üë• <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"
                    f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: <b>{daily_metrics.get('active_users', 0)}</b>\n"
                    f"‚Ä¢ –í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: <b>{daily_metrics.get('total_actions', 0)}</b>\n\n"
                    f"‚ö° <b>–ù–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã:</b>\n"
                    f"‚Ä¢ –û–∂–∏–¥–∞—é—â–∏–µ: <b>{daily_metrics.get('pending_load', 0)}</b>\n"
                    f"‚Ä¢ –í –ø—Ä–æ—Ü–µ—Å—Å–µ: <b>{daily_metrics.get('active_load', 0)}</b>"
                )
            
            await message.answer(text)
            
        except Exception as e:
            logger.error(f"Error showing performance report: {e}")
            lang = await get_user_lang(message.from_user.id)
            error_text = "Xatolik yuz berdi." if lang == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
            await message.answer(error_text)

    @router.message(F.text.in_(["üìã Xodimlar statistikasi", "üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"]))
    @admin_only
    async def staff_statistics(message: Message):
        """Show staff statistics"""
        try:
            await cleanup_user_inline_messages(message.from_user.id)
            lang = await get_user_lang(message.from_user.id)
            
            # Get staff statistics from dashboard
            dashboard_stats = await get_admin_dashboard_stats()
            
            if lang == 'uz':
                text = (
                    f"üìã <b>Xodimlar statistikasi</b>\n\n"
                    f"üë• <b>Rollar bo'yicha taqsimot:</b>\n"
                )
                
                for role_stat in dashboard_stats.get('users_by_role', []):
                    role_name = {
                        'client': 'Mijozlar',
                        'technician': 'Texniklar',
                        'manager': 'Menejerlar',
                        'admin': 'Adminlar',
                        'call_center': 'Call Center',
                        'controller': 'Kontrolyorlar',
                        'warehouse': 'Sklad'
                    }.get(role_stat['role'], role_stat['role'])
                    text += f"‚Ä¢ {role_name}: <b>{role_stat['count']}</b>\n"
                
                text += (
                    f"\n‚ö° <b>Faol xodimlar:</b>\n"
                    f"‚Ä¢ Texniklar: <b>{dashboard_stats.get('active_technicians', 0)}</b>\n"
                    f"‚Ä¢ Menejerlar: <b>{dashboard_stats.get('active_managers', 0)}</b>\n\n"
                    f"üìä <b>Bugungi faollik:</b>\n"
                    f"‚Ä¢ Bajarilgan vazifalar: <b>{dashboard_stats.get('today_completed', 0)}</b>\n"
                    f"‚Ä¢ Jami zayavkalar: <b>{dashboard_stats.get('today_orders', 0)}</b>"
                )
            else:
                text = (
                    f"üìã <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤</b>\n\n"
                    f"üë• <b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–æ–ª—è–º:</b>\n"
                )
                
                for role_stat in dashboard_stats.get('users_by_role', []):
                    role_name = {
                        'client': '–ö–ª–∏–µ–Ω—Ç—ã',
                        'technician': '–¢–µ—Ö–Ω–∏–∫–∏',
                        'manager': '–ú–µ–Ω–µ–¥–∂–µ—Ä—ã',
                        'admin': '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã',
                        'call_center': '–ö–æ–ª–ª-—Ü–µ–Ω—Ç—Ä',
                        'controller': '–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã',
                        'warehouse': '–°–∫–ª–∞–¥'
                    }.get(role_stat['role'], role_stat['role'])
                    text += f"‚Ä¢ {role_name}: <b>{role_stat['count']}</b>\n"
                
                text += (
                    f"\n‚ö° <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:</b>\n"
                    f"‚Ä¢ –¢–µ—Ö–Ω–∏–∫–∏: <b>{dashboard_stats.get('active_technicians', 0)}</b>\n"
                    f"‚Ä¢ –ú–µ–Ω–µ–¥–∂–µ—Ä—ã: <b>{dashboard_stats.get('active_managers', 0)}</b>\n\n"
                    f"üìä <b>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è:</b>\n"
                    f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: <b>{dashboard_stats.get('today_completed', 0)}</b>\n"
                    f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: <b>{dashboard_stats.get('today_orders', 0)}</b>"
                )
            
            await message.answer(text)
            
        except Exception as e:
            logger.error(f"Error showing staff statistics: {e}")
            lang = await get_user_lang(message.from_user.id)
            error_text = "Xatolik yuz berdi." if lang == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
            await message.answer(error_text)

    @router.message(F.text.in_(["üìä Grafik va diagrammalar", "üìä –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –¥–∏–∞–≥—Ä–∞–º–º—ã"]))
    @admin_only
    async def charts_and_graphs(message: Message):
        """Show charts and graphs menu"""
        try:
            await cleanup_user_inline_messages(message.from_user.id)
            lang = await get_user_lang(message.from_user.id)
            
            text = "Grafik turini tanlang:" if lang == 'uz' else "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞:"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üìà Zayavkalar dinamikasi" if lang == 'uz' else "üìà –î–∏–Ω–∞–º–∏–∫–∞ –∑–∞—è–≤–æ–∫",
                        callback_data="chart_orders_dynamic"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="ü•ß Status bo'yicha taqsimot" if lang == 'uz' else "ü•ß –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º",
                        callback_data="chart_status_distribution"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üë• Xodimlar samaradorligi" if lang == 'uz' else "üë• –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
                        callback_data="chart_staff_performance"
                    )
                ]
            ])
            
            await message.answer(text, reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"Error showing charts menu: {e}")
            lang = await get_user_lang(message.from_user.id)
            error_text = "Xatolik yuz berdi." if lang == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
            await message.answer(error_text)

    @router.message(F.text.in_(["üì§ Ma'lumotlarni eksport qilish", "ÔøΩÔøΩ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"]))
    @admin_only
    async def export_data_menu(message: Message):
        """Export data menu"""
        try:
            await cleanup_user_inline_messages(message.from_user.id)
            lang = await get_user_lang(message.from_user.id)
            
            text = "Eksport qilish uchun ma'lumot turini tanlang:" if lang == 'uz' else "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üë• Foydalanuvchilar" if lang == 'uz' else "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
                        callback_data="export_users"
                    ),
                    InlineKeyboardButton(
                        text="üìã Zayavkalar" if lang == 'uz' else "üìã –ó–∞—è–≤–∫–∏",
                        callback_data="export_orders"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üìä Statistika" if lang == 'uz' else "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                        callback_data="export_statistics"
                    ),
                    InlineKeyboardButton(
                        text="üìã Loglar" if lang == 'uz' else "üìã –õ–æ–≥–∏",
                        callback_data="export_logs"
                    )
                ]
            ])
            
            await message.answer(text, reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"Error showing export menu: {e}")
            lang = await get_user_lang(message.from_user.id)
            error_text = "Xatolik yuz berdi." if lang == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
            await message.answer(error_text)

    @router.callback_query(F.data == "refresh_general_stats")
    @admin_only
    async def refresh_general_stats(call: CallbackQuery):
        """Refresh general statistics"""
        try:
            lang = await get_user_lang(call.from_user.id)
            
            # Get fresh statistics
            stats = await get_system_statistics()
            dashboard_stats = await get_admin_dashboard_stats()
            
            if lang == 'uz':
                text = (
                    f"üîÑ <b>Yangilangan umumiy statistika</b>\n\n"
                    f"üë• <b>Foydalanuvchilar:</b>\n"
                    f"‚Ä¢ Jami: <b>{stats.get('active_clients', 0) + stats.get('active_technicians', 0)}</b>\n"
                    f"‚Ä¢ Mijozlar: <b>{stats.get('active_clients', 0)}</b>\n"
                    f"‚Ä¢ Texniklar: <b>{stats.get('active_technicians', 0)}</b>\n\n"
                    f"üìã <b>Zayavkalar:</b>\n"
                    f"‚Ä¢ Jami: <b>{stats.get('total_orders', 0)}</b>\n"
                    f"‚Ä¢ Bajarilgan: <b>{stats.get('completed_orders', 0)}</b>\n"
                    f"‚Ä¢ Kutilayotgan: <b>{stats.get('pending_orders', 0)}</b>\n"
                    f"‚Ä¢ Bugungi: <b>{dashboard_stats.get('today_orders', 0)}</b>\n\n"
                    f"‚è± <b>Samaradorlik:</b>\n"
                    f"‚Ä¢ Bajarish foizi: <b>{(stats.get('completed_orders', 0) / max(stats.get('total_orders', 1), 1) * 100):.1f}%</b>\n\n"
                    f"üïê Yangilangan: {datetime.now().strftime('%H:%M:%S')}"
                )
            else:
                text = (
                    f"üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
                    f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
                    f"‚Ä¢ –í—Å–µ–≥–æ: <b>{stats.get('active_clients', 0) + stats.get('active_technicians', 0)}</b>\n"
                    f"‚Ä¢ –ö–ª–∏–µ–Ω—Ç—ã: <b>{stats.get('active_clients', 0)}</b>\n"
                    f"‚Ä¢ –¢–µ—Ö–Ω–∏–∫–∏: <b>{stats.get('active_technicians', 0)}</b>\n\n"
                    f"üìã <b>–ó–∞—è–≤–∫–∏:</b>\n"
                    f"‚Ä¢ –í—Å–µ–≥–æ: <b>{stats.get('total_orders', 0)}</b>\n"
                    f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: <b>{stats.get('completed_orders', 0)}</b>\n"
                    f"‚Ä¢ –û–∂–∏–¥–∞—é—â–∏–µ: <b>{stats.get('pending_orders', 0)}</b>\n"
                    f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: <b>{dashboard_stats.get('today_orders', 0)}</b>\n\n"
                    f"‚è± <b>–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
                    f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: <b>{(stats.get('completed_orders', 0) / max(stats.get('total_orders', 1), 1) * 100):.1f}%</b>\n\n"
                    f"üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
                )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîÑ Yangilash" if lang == 'uz' else "üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                        callback_data="refresh_general_stats"
                    )
                ]
            ])
            
            await call.message.edit_text(text, reply_markup=keyboard)
            await call.answer("Statistika yangilandi!" if lang == 'uz' else "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            
        except Exception as e:
            logger.error(f"Error refreshing general stats: {e}")
            await call.answer("Xatolik yuz berdi!" if await get_user_lang(call.from_user.id) == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")

    @router.callback_query(F.data.startswith("export_"))
    @admin_only
    async def export_data(call: CallbackQuery):
        """Export data to CSV"""
        try:
            lang = await get_user_lang(call.from_user.id)
            export_type = call.data.split("_")[1]
            
            # Show processing message
            processing_text = "Ma'lumotlar tayyorlanmoqda..." if lang == 'uz' else "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."
            await call.message.edit_text(processing_text)
            
            # Export data
            file_path = await export_admin_data(export_type)
            
            if file_path:
                # Log admin action
                await log_admin_action(call.from_user.id, "export_data", {"export_type": export_type})
                
                # Send file
                try:
                    with open(file_path, 'rb') as file:
                        await call.message.answer_document(
                            file,
                            caption=f"üì§ {export_type.title()} ma'lumotlari eksport qilindi" if lang == 'uz' else f"üì§ –î–∞–Ω–Ω—ã–µ {export_type} —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã"
                        )
                    
                    success_text = "‚úÖ Eksport muvaffaqiyatli yakunlandi!" if lang == 'uz' else "‚úÖ –≠–∫—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!"
                    await call.message.edit_text(success_text)
                    
                    # Clean up file
                    import os
                    os.unlink(file_path)
                    
                except Exception as file_error:
                    logger.error(f"Error sending exported file: {file_error}")
                    error_text = "Faylni yuborishda xatolik." if lang == 'uz' else "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞."
                    await call.message.edit_text(error_text)
            else:
                error_text = "Eksport qilishda xatolik." if lang == 'uz' else "–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ."
                await call.message.edit_text(error_text)
            
            await call.answer()
            
        except Exception as e:
            logger.error(f"Error exporting data: {e}")
            await call.answer("Xatolik yuz berdi!" if await get_user_lang(call.from_user.id) == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")

    @router.callback_query(F.data.startswith("chart_"))
    @admin_only
    async def show_chart(call: CallbackQuery):
        """Show chart (placeholder for future implementation)"""
        try:
            lang = await get_user_lang(call.from_user.id)
            chart_type = call.data.split("_", 1)[1]
            
            # For now, show text-based representation
            if chart_type == "orders_dynamic":
                # Get last 7 days data
                dashboard_stats = await get_admin_dashboard_stats()
                
                text = "üìà <b>Zayavkalar dinamikasi (oxirgi 7 kun)</b>\n\n" if lang == 'uz' else "ÔøΩÔøΩ <b>–î–∏–Ω–∞–º–∏–∫–∞ –∑–∞—è–≤–æ–∫ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)</b>\n\n"
                text += "Grafik funksiyasi tez orada qo'shiladi..." if lang == 'uz' else "–§—É–Ω–∫—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è..."
                
            elif chart_type == "status_distribution":
                dashboard_stats = await get_admin_dashboard_stats()
                
                text = "ü•ß <b>Status bo'yicha taqsimot</b>\n\n" if lang == 'uz' else "ü•ß <b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º</b>\n\n"
                
                for status_stat in dashboard_stats.get('orders_by_status', []):
                    status_name = {
                        'new': 'üÜï Yangi' if lang == 'uz' else 'üÜï –ù–æ–≤—ã–µ',
                        'pending': '‚è≥ Kutilmoqda' if lang == 'uz' else '‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ',
                        'assigned': 'üë®‚Äçüîß Tayinlangan' if lang == 'uz' else 'üë®‚Äçüîß –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ',
                        'in_progress': 'üîÑ Jarayonda' if lang == 'uz' else 'üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ',
                        'completed': '‚úÖ Bajarilgan' if lang == 'uz' else '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ',
                        'cancelled': '‚ùå Bekor qilingan' if lang == 'uz' else '‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ'
                    }.get(status_stat['status'], status_stat['status'])
                    
                    # Simple text-based bar chart
                    bar_length = min(status_stat['count'] // 2, 20)
                    bar = "‚ñà" * bar_length
                    text += f"{status_name}: {bar} {status_stat['count']}\n"
            
            else:
                text = "Grafik funksiyasi ishlab chiqilmoqda..." if lang == 'uz' else "–§—É–Ω–∫—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ..."
            
            await call.message.edit_text(text)
            await call.answer()
            
        except Exception as e:
            logger.error(f"Error showing chart: {e}")
            await call.answer("Xatolik yuz berdi!" if await get_user_lang(call.from_user.id) == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")

    return router
