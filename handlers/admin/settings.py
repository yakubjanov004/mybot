from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from functools import wraps
import logging

from database.admin_queries import (
    is_admin, get_system_settings, update_system_setting,
    get_notification_templates, update_notification_template, log_admin_action
)
from keyboards.admin_buttons import get_settings_keyboard
from states.admin_states import AdminStates
from database.base_queries import get_user_by_telegram_id, get_user_lang
from utils.inline_cleanup import safe_delete_message, answer_and_cleanup
from utils.logger import setup_logger
from utils.role_checks import admin_only
from loader import inline_message_manager
from aiogram.filters import StateFilter

# Setup logger
logger = setup_logger('bot.admin.settings')

def get_admin_settings_router():
    router = Router()

    @router.message(StateFilter(AdminStates.main_menu), F.text.in_(["‚öôÔ∏è Sozlamalar", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]))
    @admin_only
    async def settings_menu(message: Message, state: FSMContext):
        """Settings main menu"""
        try:
            await safe_delete_message(message.bot, message.chat.id, message.message_id)
            lang = await get_user_lang(message.from_user.id)
            
            text = "Sozlamalar bo'limi (stub)." if lang == 'uz' else "–†–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–∑–∞–≥–ª—É—à–∫–∞)."
            
            sent_message = await message.answer(
                text,
                reply_markup=get_settings_keyboard(lang)
            )
            await inline_message_manager.track(message.from_user.id, sent_message.message_id)
            await state.set_state(AdminStates.settings)
            
        except Exception as e:
            logger.error(f"Error in settings menu: {e}")
            lang = await get_user_lang(message.from_user.id)
            error_text = "Xatolik yuz berdi." if lang == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
            await message.answer(error_text)

    @router.message(F.text.in_(["üîß Tizim sozlamalari", "üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"]))
    @admin_only
    async def system_settings(message: Message):
        """Show system settings"""
        try:
            await safe_delete_message(message.bot, message.chat.id, message.message_id)
            lang = await get_user_lang(message.from_user.id)
            
            # Get system settings
            settings = await get_system_settings()
            
            if not settings:
                text = "Tizim sozlamalari topilmadi." if lang == 'uz' else "–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
                await message.answer(text)
                return
            
            if lang == 'uz':
                text = f"üîß <b>Tizim sozlamalari</b>\n\n"
            else:
                text = f"üîß <b>–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            
            for key, setting in settings.items():
                setting_name = {
                    'max_orders_per_technician': 'Texnik uchun maksimal zayavkalar' if lang == 'uz' else '–ú–∞–∫—Å–∏–º—É–º –∑–∞—è–≤–æ–∫ –Ω–∞ —Ç–µ—Ö–Ω–∏–∫–∞',
                    'order_timeout_hours': 'Zayavka timeout (soat)' if lang == 'uz' else '–¢–∞–π–º–∞—É—Ç –∑–∞—è–≤–∫–∏ (—á–∞—Å—ã)',
                    'notification_enabled': 'Bildirishnomalar yoqilgan' if lang == 'uz' else '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã',
                    'auto_assign_enabled': 'Avtomatik tayinlash' if lang == 'uz' else '–ê–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ',
                    'maintenance_mode': 'Texnik xizmat rejimi' if lang == 'uz' else '–†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è'
                }.get(key, key)
                
                text += f"‚Ä¢ <b>{setting_name}:</b> {setting['value']}\n"
                if setting.get('description'):
                    text += f"  <i>{setting['description']}</i>\n"
                text += "\n"
            
            # Add management buttons
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úèÔ∏è Sozlamani o'zgartirish" if lang == 'uz' else "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É",
                        callback_data="edit_system_setting"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîÑ Yangilash" if lang == 'uz' else "üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                        callback_data="refresh_system_settings"
                    )
                ]
            ])
            
            await message.answer(text, reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"Error showing system settings: {e}")
            lang = await get_user_lang(message.from_user.id)
            error_text = "Xatolik yuz berdi." if lang == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
            await message.answer(error_text)

    @router.message(F.text.in_(["üì¢ Bildirishnoma shablonlari", "üì¢ –®–∞–±–ª–æ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"]))
    @admin_only
    async def notification_templates(message: Message):
        """Show notification templates"""
        try:
            await safe_delete_message(message.bot, message.chat.id, message.message_id)
            lang = await get_user_lang(message.from_user.id)
            
            # Get notification templates
            templates = await get_notification_templates()
            
            if not templates:
                text = "Bildirishnoma shablonlari topilmadi." if lang == 'uz' else "–®–∞–±–ª–æ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
                await message.answer(text)
                return
            
            if lang == 'uz':
                text = f"üì¢ <b>Bildirishnoma shablonlari</b>\n\n"
            else:
                text = f"üì¢ <b>–®–∞–±–ª–æ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
            
            # Group templates by type
            template_groups = {}
            for template in templates:
                template_type = template['template_type']
                if template_type not in template_groups:
                    template_groups[template_type] = []
                template_groups[template_type].append(template)
            
            for template_type, group_templates in template_groups.items():
                type_name = {
                    'order_created': 'Zayavka yaratildi' if lang == 'uz' else '–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞',
                    'order_assigned': 'Zayavka tayinlandi' if lang == 'uz' else '–ó–∞—è–≤–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞',
                    'order_completed': 'Zayavka bajarildi' if lang == 'uz' else '–ó–∞—è–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞',
                    'welcome_message': 'Xush kelibsiz xabari' if lang == 'uz' else '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
                }.get(template_type, template_type)
                
                text += f"üìã <b>{type_name}:</b>\n"
                
                for template in group_templates:
                    lang_name = "O'zbek" if template['language'] == 'uz' else "–†—É—Å—Å–∫–∏–π"
                    text += f"  ‚Ä¢ {lang_name}: {template['content'][:50]}...\n"
                
                text += "\n"
            
            # Add management buttons
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úèÔ∏è Shablonni tahrirlash" if lang == 'uz' else "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω",
                        callback_data="edit_notification_template"
                    )
                ]
            ])
            
            await message.answer(text, reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"Error showing notification templates: {e}")
            lang = await get_user_lang(message.from_user.id)
            error_text = "Xatolik yuz berdi." if lang == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
            await message.answer(error_text)

    @router.message(F.text.in_(["üîê Xavfsizlik sozlamalari", "üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"]))
    @admin_only
    async def security_settings(message: Message):
        """Show security settings"""
        try:
            await safe_delete_message(message.bot, message.chat.id, message.message_id)
            lang = await get_user_lang(message.from_user.id)
            
            if lang == 'uz':
                text = (
                    f"üîê <b>Xavfsizlik sozlamalari</b>\n\n"
                    f"üîí <b>Joriy sozlamalar:</b>\n"
                    f"‚Ä¢ Admin huquqlari: Faol\n"
                    f"‚Ä¢ Avtorizatsiya: Telegram ID bo'yicha\n"
                    f"‚Ä¢ Sessiya muddati: Cheksiz\n"
                    f"‚Ä¢ Loglar saqlanishi: 30 kun\n\n"
                    f"‚ö†Ô∏è <b>Xavfsizlik choralari:</b>\n"
                    f"‚Ä¢ Barcha admin amallar loglanadi\n"
                    f"‚Ä¢ Foydalanuvchi rollari nazorat qilinadi\n"
                    f"‚Ä¢ Tizimga kirish kuzatiladi\n\n"
                    f"üìã <b>Tavsiyalar:</b>\n"
                    f"‚Ä¢ Admin huquqlarini faqat ishonchli odamlarga bering\n"
                    f"‚Ä¢ Muntazam ravishda loglarni tekshiring\n"
                    f"‚Ä¢ Shubhali faollikni darhol xabar qiling"
                )
            else:
                text = (
                    f"üîê <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</b>\n\n"
                    f"üîí <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
                    f"‚Ä¢ –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: –ê–∫—Ç–∏–≤–Ω—ã\n"
                    f"‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: –ü–æ Telegram ID\n"
                    f"‚Ä¢ –°—Ä–æ–∫ —Å–µ—Å—Å–∏–∏: –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω\n"
                    f"‚Ä¢ –•—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤: 30 –¥–Ω–µ–π\n\n"
                    f"‚ö†Ô∏è <b>–ú–µ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:</b>\n"
                    f"‚Ä¢ –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–æ–≤ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è\n"
                    f"‚Ä¢ –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é—Ç—Å—è\n"
                    f"‚Ä¢ –î–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è\n\n"
                    f"üìã <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
                    f"‚Ä¢ –î–∞–≤–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–º –ª–∏—Ü–∞–º\n"
                    f"‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ª–æ–≥–∏\n"
                    f"‚Ä¢ –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–æ–æ–±—â–∞–π—Ç–µ –æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
                )
            
            await message.answer(text)
            
        except Exception as e:
            logger.error(f"Error showing security settings: {e}")
            lang = await get_user_lang(message.from_user.id)
            error_text = "Xatolik yuz berdi." if lang == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
            await message.answer(error_text)

    @router.message(F.text.in_(["üîÑ Backup va tiklash", "üîÑ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ"]))
    @admin_only
    async def backup_restore(message: Message):
        """Show backup and restore options"""
        try:
            await safe_delete_message(message.bot, message.chat.id, message.message_id)
            lang = await get_user_lang(message.from_user.id)
            
            if lang == 'uz':
                text = (
                    f"üîÑ <b>Backup va tiklash</b>\n\n"
                    f"üíæ <b>Avtomatik backup:</b>\n"
                    f"‚Ä¢ Kunlik backup: Yoqilgan\n"
                    f"‚Ä¢ Backup vaqti: 02:00\n"
                    f"‚Ä¢ Saqlanish muddati: 30 kun\n\n"
                    f"üìÅ <b>Backup ma'lumotlari:</b>\n"
                    f"‚Ä¢ Foydalanuvchilar ma'lumotlari\n"
                    f"‚Ä¢ Zayavkalar tarixi\n"
                    f"‚Ä¢ Tizim sozlamalari\n"
                    f"‚Ä¢ Loglar\n\n"
                    f"‚ö†Ô∏è <b>Diqqat:</b>\n"
                    f"Manual backup va tiklash funksiyalari\n"
                    f"faqat server administratori tomonidan\n"
                    f"amalga oshirilishi mumkin."
                )
            else:
                text = (
                    f"üîÑ <b>–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ</b>\n\n"
                    f"üíæ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π backup:</b>\n"
                    f"‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π backup: –í–∫–ª—é—á–µ–Ω\n"
                    f"‚Ä¢ –í—Ä–µ–º—è backup: 02:00\n"
                    f"‚Ä¢ –°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è: 30 –¥–Ω–µ–π\n\n"
                    f"üìÅ <b>–î–∞–Ω–Ω—ã–µ backup:</b>\n"
                    f"‚Ä¢ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                    f"‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫\n"
                    f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã\n"
                    f"‚Ä¢ –õ–æ–≥–∏\n\n"
                    f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b>\n"
                    f"–§—É–Ω–∫—Ü–∏–∏ —Ä—É—á–Ω–æ–≥–æ backup –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è\n"
                    f"–º–æ–≥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
                    f"—Å–µ—Ä–≤–µ—Ä–∞."
                )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üì§ Ma'lumotlarni eksport" if lang == 'uz' else "üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö",
                        callback_data="export_all_data"
                    )
                ]
            ])
            
            await message.answer(text, reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"Error showing backup restore: {e}")
            lang = await get_user_lang(message.from_user.id)
            error_text = "Xatolik yuz berdi." if lang == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
            await message.answer(error_text)

    @router.callback_query(F.data == "edit_system_setting")
    @admin_only
    async def edit_system_setting_menu(call: CallbackQuery, state: FSMContext):
        """Show system settings edit menu"""
        try:
            await answer_and_cleanup(call, cleanup_after=True)
            lang = await get_user_lang(call.from_user.id)
            
            # Get system settings
            settings = await get_system_settings()
            
            if not settings:
                text = "Sozlamalar topilmadi." if lang == 'uz' else "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
                await call.message.edit_text(text)
                return
            
            text = "O'zgartirish uchun sozlamani tanlang:" if lang == 'uz' else "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[])
            for key, setting in list(settings.items())[:10]:  # Show first 10 settings
                setting_name = {
                    'max_orders_per_technician': 'Maksimal zayavkalar' if lang == 'uz' else '–ú–∞–∫—Å. –∑–∞—è–≤–æ–∫',
                    'order_timeout_hours': 'Timeout (soat)' if lang == 'uz' else '–¢–∞–π–º–∞—É—Ç (—á)',
                    'notification_enabled': 'Bildirishnomalar' if lang == 'uz' else '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                    'auto_assign_enabled': 'Avto-tayinlash' if lang == 'uz' else '–ê–≤—Ç–æ-–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ'
                }.get(key, key[:20])
                
                keyboard.inline_keyboard.append([
                    InlineKeyboardButton(
                        text=f"{setting_name}: {setting['value']}",
                        callback_data=f"edit_setting_{key}"
                    )
                ])
            
            await call.message.edit_text(text, reply_markup=keyboard)
            await state.set_state(AdminStates.editing_setting)
            
        except Exception as e:
            logger.error(f"Error showing edit system setting menu: {e}")
            await call.answer("Xatolik yuz berdi!" if await get_user_lang(call.from_user.id) == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")

    @router.callback_query(F.data.startswith("edit_setting_"), AdminStates.editing_setting)
    @admin_only
    async def edit_setting_value(call: CallbackQuery, state: FSMContext):
        """Edit setting value"""
        try:
            lang = await get_user_lang(call.from_user.id)
            setting_key = call.data.split("edit_setting_")[1]
            
            await state.update_data(setting_key=setting_key)
            
            text = f"'{setting_key}' sozlamasi uchun yangi qiymatni kiriting:" if lang == 'uz' else f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ '{setting_key}':"
            
            await call.message.edit_text(text)
            await state.set_state(AdminStates.waiting_for_setting_value)
            
        except Exception as e:
            logger.error(f"Error editing setting value: {e}")
            await call.answer("Xatolik yuz berdi!" if await get_user_lang(call.from_user.id) == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")

    @router.message(AdminStates.waiting_for_setting_value)
    @admin_only
    async def process_setting_value(message: Message, state: FSMContext):
        """Process new setting value"""
        try:
            lang = await get_user_lang(message.from_user.id)
            data = await state.get_data()
            setting_key = data.get('setting_key')
            new_value = message.text.strip()
            
            if not new_value:
                text = "Qiymat bo'sh bo'lishi mumkin emas." if lang == 'uz' else "–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º."
                await message.answer(text)
                return
            
            # Update setting
            success = await update_system_setting(setting_key, new_value, message.from_user.id)
            
            if success:
                # Log admin action
                await log_admin_action(message.from_user.id, "update_system_setting", {
                    "setting_key": setting_key,
                    "new_value": new_value
                })
                
                text = f"‚úÖ '{setting_key}' sozlamasi '{new_value}' ga o'zgartirildi." if lang == 'uz' else f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ '{setting_key}' –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ '{new_value}'."
            else:
                text = "Sozlamani o'zgartirishda xatolik." if lang == 'uz' else "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
            
            await message.answer(text)
            await state.clear()
            
        except Exception as e:
            logger.error(f"Error processing setting value: {e}")
            lang = await get_user_lang(message.from_user.id)
            error_text = "Xatolik yuz berdi." if lang == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
            await message.answer(error_text)
            await state.clear()

    @router.callback_query(F.data == "refresh_system_settings")
    @admin_only
    async def refresh_system_settings(call: CallbackQuery):
        """Refresh system settings"""
        try:
            lang = await get_user_lang(call.from_user.id)
            
            # Get fresh system settings
            settings = await get_system_settings()
            
            if not settings:
                text = "Tizim sozlamalari topilmadi." if lang == 'uz' else "–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
                await call.message.edit_text(text)
                return
            
            if lang == 'uz':
                text = f"üîÑ <b>Yangilangan tizim sozlamalari</b>\n\n"
            else:
                text = f"üîÑ <b>–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            
            for key, setting in settings.items():
                setting_name = {
                    'max_orders_per_technician': 'Texnik uchun maksimal zayavkalar' if lang == 'uz' else '–ú–∞–∫—Å–∏–º—É–º –∑–∞—è–≤–æ–∫ –Ω–∞ —Ç–µ—Ö–Ω–∏–∫–∞',
                    'order_timeout_hours': 'Zayavka timeout (soat)' if lang == 'uz' else '–¢–∞–π–º–∞—É—Ç –∑–∞—è–≤–∫–∏ (—á–∞—Å—ã)',
                    'notification_enabled': 'Bildirishnomalar yoqilgan' if lang == 'uz' else '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã',
                    'auto_assign_enabled': 'Avtomatik tayinlash' if lang == 'uz' else '–ê–≤—Ç–æ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ'
                }.get(key, key)
                
                text += f"‚Ä¢ <b>{setting_name}:</b> {setting['value']}\n"
            
            text += f"\nüïê Yangilangan: {datetime.now().strftime('%H:%M:%S')}" if lang == 'uz' else f"\nüïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úèÔ∏è Sozlamani o'zgartirish" if lang == 'uz' else "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É",
                        callback_data="edit_system_setting"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üîÑ Yangilash" if lang == 'uz' else "üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                        callback_data="refresh_system_settings"
                    )
                ]
            ])
            
            await call.message.edit_text(text, reply_markup=keyboard)
            await call.answer("Sozlamalar yangilandi!" if lang == 'uz' else "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
            
        except Exception as e:
            logger.error(f"Error refreshing system settings: {e}")
            await call.answer("Xatolik yuz berdi!" if await get_user_lang(call.from_user.id) == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")

    @router.callback_query(F.data == "export_all_data")
    @admin_only
    async def export_all_data(call: CallbackQuery):
        """Export all system data"""
        try:
            lang = await get_user_lang(call.from_user.id)
            
            processing_text = "Barcha ma'lumotlar eksport qilinmoqda..." if lang == 'uz' else "–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö..."
            await call.message.edit_text(processing_text)
            
            # Export different types of data
            export_types = ['users', 'orders', 'logs']
            exported_files = []
            
            for export_type in export_types:
                file_path = await export_admin_data(export_type)
                if file_path:
                    exported_files.append((export_type, file_path))
            
            if exported_files:
                # Log admin action
                await log_admin_action(call.from_user.id, "export_all_data", {
                    "exported_types": [et[0] for et in exported_files]
                })
                
                success_text = f"‚úÖ {len(exported_files)} ta fayl eksport qilindi!" if lang == 'uz' else f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(exported_files)} —Ñ–∞–π–ª–æ–≤!"
                await call.message.edit_text(success_text)
                
                # Send each file
                for export_type, file_path in exported_files:
                    try:
                        with open(file_path, 'rb') as file:
                            await call.message.answer_document(
                                file,
                                caption=f"üì§ {export_type.title()} ma'lumotlari" if lang == 'uz' else f"üì§ –î–∞–Ω–Ω—ã–µ {export_type}"
                            )
                        
                        # Clean up file
                        import os
                        os.unlink(file_path)
                        
                    except Exception as file_error:
                        logger.error(f"Error sending exported file {export_type}: {file_error}")
            else:
                error_text = "Eksport qilishda xatolik." if lang == 'uz' else "–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ."
                await call.message.edit_text(error_text)
            
            await call.answer()
            
        except Exception as e:
            logger.error(f"Error exporting all data: {e}")
            await call.answer("Xatolik yuz berdi!" if await get_user_lang(call.from_user.id) == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")

    return router
