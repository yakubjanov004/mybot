from aiogram import F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from functools import wraps
import logging
from datetime import datetime, timedelta

from database.admin_queries import (
    get_orders_management_stats, get_filtered_orders, bulk_assign_orders, log_admin_action
)
from database.base_queries import (
    get_zayavka_by_id, update_zayavka_status, assign_zayavka_to_technician,
    get_user_by_telegram_id, get_user_lang
)
from database.technician_queries import get_available_technicians
from keyboards.admin_buttons import (
    get_zayavka_main_keyboard,
    get_zayavka_status_filter_keyboard,
    get_zayavka_filter_menu_keyboard,
    get_zayavka_section_keyboard
)
from states.admin_states import AdminStates
from utils.inline_cleanup import (
    answer_and_cleanup, safe_delete_message, cleanup_user_inline_messages
)
from utils.logger import setup_logger
from utils.role_router import get_role_router
from utils.role_checks import admin_only
from loader import inline_message_manager
from aiogram.filters import StateFilter

def format_order(order: dict, lang: str) -> str:
    """Format order details in both Uzbek and Russian"""
    return (
        f"üÜî #{order['id']}\n"
        f"üë§ {order.get('client_name', 'N/A')}\n"
        f"üì± {order.get('client_phone', 'N/A')}\n"
        f"üìç {order.get('address', 'N/A')}\n"
        f"üìù {order.get('title', 'N/A')}\n"
        f"üìÖ {order['created_at'].strftime('%d.%m.%Y %H:%M')}\n\n"
        f"{"Holat: " if lang == 'uz' else "–°—Ç–∞—Ç—É—Å: "}"
        f"{order.get('status', 'N/A')}\n\n"
        f"{"Texnik: " if lang == 'uz' else "–¢–µ—Ö–Ω–∏–∫: "}"
        f"{order.get('technician_name', 'N/A')}\n\n"
        f"{"Qo'shimcha ma'lumotlar: " if lang == 'uz' else "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: "}"
        f"{order.get('description', 'N/A')}")

# Setup logger
logger = setup_logger('bot.admin.orders')

def get_admin_orders_router():
    router = get_role_router("admin")
    
    @router.message(StateFilter(AdminStates.main_menu), F.text.in_(["üìù Zayavkalar", "üìù –ó–∞—è–≤–∫–∏"]))
    @admin_only
    async def orders_menu(message: Message, state: FSMContext):
        """Show orders menu"""
        try:
            await safe_delete_message(message.bot, message.chat.id, message.message_id)
            lang = await get_user_lang(message.from_user.id)
            
            # Get orders statistics
            stats = await get_orders_management_stats()
            
            if lang == 'uz':
                text = "üìä <b>Zayavkalar statistikasi</b>\n\n"
                text += f"Yangi: {stats.get('new', 0)}\n"
                text += f"Jarayonda: {stats.get('in_progress', 0)}\n"
                text += f"Bajarilgan: {stats.get('completed', 0)}\n"
                text += f"Bekor qilingan: {stats.get('cancelled', 0)}\n\n"
                text += "Zayavkalar bo'yicha qidirish va filtrlash uchun quyidagi tugmalardan foydalaning:"
            else:
                text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫</b>\n\n"
                text += f"–ù–æ–≤—ã–µ: {stats.get('new', 0)}\n"
                text += f"–í –ø—Ä–æ—Ü–µ—Å—Å–µ: {stats.get('in_progress', 0)}\n"
                text += f"–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ: {stats.get('completed', 0)}\n"
                text += f"–û—Ç–º–µ–Ω—ë–Ω–Ω—ã–µ: {stats.get('cancelled', 0)}\n\n"
                text += "–î–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏:"
            
            sent_message = await message.answer(
                text,
                reply_markup=get_zayavka_main_keyboard(lang)
            )
            
            # Save message ID for cleanup
            await state.update_data(last_message_id=sent_message.message_id)
            
        except Exception as e:
            logger.error(f"Error in orders menu: {e}")
            lang = await get_user_lang(message.from_user.id)
            error_text = "Xatolik yuz berdi." if lang == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
            await message.answer(error_text)

    @router.message(F.text.in_(['üìÇ Holat bo\'yicha', 'üìÇ –ü–æ —Å—Ç–∞—Ç—É—Å—É']))
    @admin_only
    async def handle_status_menu(message: Message, state: FSMContext):
        """Handle status menu"""
        try:
            lang = await get_user_lang(message.from_user.id)
            await safe_delete_message(message.bot, message.chat.id, message.message_id)
            
            text = "üìÇ <b>Holat bo'yicha qidirish</b>\n\n" if lang == 'uz' else "üìÇ <b>–ü–æ–∏—Å–∫ –ø–æ —Å—Ç–∞—Ç—É—Å—É</b>\n\n"
            text += "Holatni tanlang:" if lang == 'uz' else "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å:"
            
            # Switch to section keyboard
            sent_message = await message.answer(
                text,
                reply_markup=get_zayavka_section_keyboard(lang)
            )
            await state.update_data(last_message_id=sent_message.message_id)
            
            # Show inline keyboard with pagination
            await message.answer(
                text,
                reply_markup=get_zayavka_status_filter_keyboard(lang, page=1, total_pages=1)
            )
            
        except Exception as e:
            logger.error(f"Error in status menu handler: {e}")
            lang = await get_user_lang(message.from_user.id)
            error_text = "Xatolik yuz berdi." if lang == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
            await message.answer(error_text)

    @router.message(F.text == "üîç Qidirish / Filtrlash")
    @admin_only
    async def handle_filter_menu(message: Message, state: FSMContext):
        """Handle filter menu selection"""
        try:
            lang = await get_user_lang(message.from_user.id)
            back_text = "üîô Orqaga" if lang == "uz" else "üîô –ù–∞–∑–∞–¥"
            await safe_delete_message(message.bot, message.chat.id, message.message_id)
            
            text = "üîç <b>Qidirish / Filtrlash</b>\n\n" if lang == 'uz' else "üîç <b>–ü–æ–∏—Å–∫ / –§–∏–ª—å—Ç—Ä</b>\n\n"
            text += "Qidirish turini tanlang:" if lang == 'uz' else "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:"
            
            # Switch to section keyboard
            sent_message = await message.answer(
                text,
                reply_markup=get_zayavka_section_keyboard(lang)
            )
            await state.update_data(last_message_id=sent_message.message_id)
            
            # Show inline keyboard with pagination
            await message.answer(
                text,
                reply_markup=get_zayavka_filter_menu_keyboard(lang, page=1, total_pages=2, admin=True)
            )
            
        except Exception as e:
            logger.error(f"Error in filter menu handler: {e}")
            lang = await get_user_lang(message.from_user.id)
            error_text = "Xatolik yuz berdi." if lang == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
            await message.answer(error_text)

    @router.callback_query(F.data.startswith("zayavka:status:"))
    @admin_only
    async def handle_status_selection(callback: CallbackQuery, state: FSMContext):
        """Handle status selection from inline keyboard"""
        try:
            lang = await get_user_lang(callback.from_user.id)
            data = callback.data.split(':')[2:]
            action = data[0]
            
            if action in ["prev", "next"]:
                current_page = int(data[1])
                new_page = current_page - 1 if action == "prev" else current_page + 1
                
                # Get orders for the selected status
                state_data = await state.get_data()
                status = state_data.get('selected_status')
                orders = await get_filtered_orders(status=status)
                
                if not orders:
                    text = "Zayavkalar topilmadi." if lang == 'uz' else "–ó–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
                    await callback.message.edit_text(text)
                    return
                
                # Show first 10 orders
                text = "Zayavkalar:\n\n" if lang == 'uz' else "–ó–∞—è–≤–∫–∏:\n\n"
                for order in orders[:10]:
                    text += format_order(order, lang)
                    text += "\n\n"
                
                await callback.message.edit_reply_markup(
                    reply_markup=get_zayavka_status_filter_keyboard(lang, page=new_page, total_pages=1)
                )
                await callback.answer()
                return

            # Get orders for the selected status
            status = data[1]
            orders = await get_filtered_orders(filters={'status': status})
            
            if not orders:
                text = "Zayavkalar topilmadi." if lang == 'uz' else "–ó–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
                await callback.message.edit_text(text)
                return
                
            # Show first 10 orders
            text = "Zayavkalar:\n\n" if lang == 'uz' else "–ó–∞—è–≤–∫–∏:\n\n"
            for order in orders[:10]:
                text += format_order(order, lang)
                text += "\n\n"
                
            await state.update_data(selected_status=status)
            await callback.message.edit_reply_markup(
                reply_markup=get_zayavka_status_filter_keyboard(lang, page=1, total_pages=1)
            )
            await callback.answer()
            
        except Exception as e:
            logger.error(f"Error in status selection handler: {e}")
            lang = await get_user_lang(callback.from_user.id)
            error_text = "Xatolik yuz berdi." if lang == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
            await callback.message.edit_text(error_text)

    @router.callback_query(F.data.startswith("zayavka:filter:"))
    @admin_only
    async def handle_filter_selection(callback: CallbackQuery, state: FSMContext):
        """Handle filter selection from inline keyboard"""
        try:
            lang = await get_user_lang(callback.from_user.id)
            data = callback.data.split(':')[2:]
            action = data[0]
            
            if action in ["prev", "next"]:
                current_page = int(data[1])
                new_page = current_page - 1 if action == "prev" else current_page + 1
                
                # Get current filter type from state
                state_data = await state.get_data()
                active_filter = state_data.get('filter_type')
                
                await callback.message.edit_reply_markup(
                    reply_markup=get_zayavka_filter_menu_keyboard(lang, page=new_page, active_filter=active_filter, admin=True)
                )
                await callback.answer()
                return

            filter_map = {
                'username': "üî§ FIO / Username",
                'id': "üî¢ Zayavka ID",
                'date': "üìÜ Sana oraliq",
                'category': "üè∑ Kategoriya",
                'technician': "üë®‚Äçüîß Texnik"
            }
        
            filter_type = filter_map.get(action)
            if not filter_type:
                raise ValueError("Invalid filter type")
                
            text = {
                'uz': {
                    'username': " üî° <b>FIO / Username bo'yicha qidirish</b>\n\n",
                    'id': " üî¢ <b>Zayavka ID bo'yicha qidirish</b>\n\n",
                    'date': " üìÖ <b>Sana oraliq bo'yicha qidirish</b>\n\n",
                    'category': " üè∑ <b>Kategoriya bo'yicha qidirish</b>\n\n",
                    'technician': " üë®‚Äçüîß <b>Texnik bo'yicha qidirish</b>\n\n"
                },
                'ru': {
                    'username': " üî° <b>–ü–æ–∏—Å–∫ –ø–æ –§–ò–û / Username</b>\n\n",
                    'id': " üî¢ <b>–ü–æ–∏—Å–∫ –ø–æ ID –∑–∞—è–≤–∫–∏</b>\n\n",
                    'date': " üìÖ <b>–ü–æ–∏—Å–∫ –ø–æ –¥–∞—Ç–µ</b>\n\n",
                    'category': " üè∑ <b>–ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n",
                    'technician': " üë®‚Äçüîß <b>–ü–æ–∏—Å–∫ –ø–æ —Ç–µ—Ö–Ω–∏–∫—É</b>\n\n"
                }
            }
        
            text = text[lang][action]
            text += "Kerakli ma'lumotni kiriting:" if lang == 'uz' else "–í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:"
        
            # Set state based on filter type
            if action in ["date", "category"]:
                await state.set_state(AdminStates.filtering_selected)
            else:
                await state.set_state(AdminStates.filtering)
        
            await callback.message.edit_text(text)
            
            # Send new message with filter keyboard (replace with edit_text for inline UX)
            await callback.message.edit_text(
                "Qidirish turini tanlang:" if lang == 'uz' else "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:",
                reply_markup=get_zayavka_filter_menu_keyboard(lang, active_filter=action if action in ["date", "category"] else None, admin=True)
            )
            await state.update_data(filter_type=action)
            await callback.answer()
        
        except Exception as e:
            logger.error(f"Error in filter selection handler: {e}")
            lang = await get_user_lang(callback.from_user.id)
            error_text = "Xatolik yuz berdi." if lang == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
            await callback.message.edit_text(error_text)

    @router.callback_query(F.data.startswith("bulk_assign_"))
    @admin_only
    async def bulk_assign_orders(call: CallbackQuery, state: FSMContext):
        """Bulk assign orders to technician"""
        try:
            lang = await get_user_lang(call.from_user.id)
            
            order_type = call.data.split("_")[2]
            
            # Get available technicians
            technicians = await get_available_technicians()
            
            if not technicians:
                text = "Mavjud texniklar yo'q." if lang == 'uz' else "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Ö–Ω–∏–∫–æ–≤."
                await call.message.edit_text(text)
                return
            
            text = "Texnikni tanlang:" if lang == 'uz' else "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∞:"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[])
            for tech in technicians[:10]:  # Show first 10
                keyboard.inline_keyboard.append([
                    InlineKeyboardButton(
                        text=f"üë®‚Äçüîß {tech['full_name']} ({tech.get('active_tasks', 0)} vazifa)",
                        callback_data=f"bulk_confirm_{order_type}_{tech['id']}"
                    )
                ])
            
            await call.message.edit_text(text, reply_markup=keyboard)
        
        except Exception as e:
            logger.error(f"Error in bulk assign: {e}")
            lang = await get_user_lang(call.from_user.id)
            error_text = "Xatolik yuz berdi." if lang == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
            await call.message.edit_text(error_text)
            return

    @router.callback_query(F.data.startswith("order_details_"))
    @admin_only
    async def show_order_details(call: CallbackQuery, state: FSMContext):
        """Show order details"""
        try:
            lang = await get_user_lang(call.from_user.id)
            
            order_id = int(call.data.split("_")[-1])
            
            # Get order details
            order = await get_zayavka_by_id(order_id)
            
            if not order:
                text = "Zayavka topilmadi." if lang == 'uz' else "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
                await call.message.edit_text(text)
                return

            text = (
                "Zayavka ma'lumotlari:\n\n"
                f"üÜî #{order['id']}\n"
                f"üë§ {order.get('client_name', 'N/A')}\n"
                f"üì± {order.get('client_phone', 'N/A')}\n"
                f"üìç {order.get('address', 'N/A')}\n"
                f"üìù {order.get('title', 'N/A')}\n"
                f"üìÖ {order['created_at'].strftime('%d.%m.%Y %H:%M')}\n\n"
                "Holat: " if lang == 'uz' else "–°—Ç–∞—Ç—É—Å: "
                f"{order.get('status', 'N/A')}\n\n"
                "Texnik: " if lang == 'uz' else "–¢–µ—Ö–Ω–∏–∫: "
                f"{order.get('technician_name', 'N/A')}\n\n"
                "Qo'shimcha ma'lumotlar: " if lang == 'uz' else "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: "
                f"{order.get('description', 'N/A')}")
        
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üìã Batafsil" if lang == 'uz' else "üìã –ü–æ–¥—Ä–æ–±–Ω–æ",
                        callback_data=f"order_details_{order['id']}"
                    )
                ]
            ])
        
            await call.message.edit_text(text, reply_markup=keyboard)
            return
        except Exception as e:
            logger.error(f"Error showing order details: {e}")
            lang = await get_user_lang(call.from_user.id)
            error_text = "Xatolik yuz berdi." if lang == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
            await call.message.edit_text(error_text)

    @router.callback_query(F.data.startswith("change_status_"))
    @admin_only
    async def change_order_status(call: CallbackQuery):
        """Change order status"""
        try:
            lang = await get_user_lang(call.from_user.id)
            order_id = int(call.data.split("_")[-1])
            
            text = "Yangi statusni tanlang:" if lang == 'uz' else "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚è≥ Kutilmoqda" if lang == 'uz' else "‚è≥ –û–∂–∏–¥–∞–µ—Ç",
                        callback_data=f"set_status_{order_id}_pending"
                    ),
                    InlineKeyboardButton(
                        text="üîÑ Jarayonda" if lang == 'uz' else "üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ",
                        callback_data=f"set_status_{order_id}_in_progress"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚úÖ Bajarilgan" if lang == 'uz' else "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ",
                        callback_data=f"set_status_{order_id}_completed"
                    ),
                    InlineKeyboardButton(
                        text="‚ùå Bekor qilingan" if lang == 'uz' else "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ",
                        callback_data=f"set_status_{order_id}_cancelled"
                    )
                ]
            ])
            
            await call.message.edit_text(text, reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"Error changing order status: {e}")
            lang = await get_user_lang(call.from_user.id)
            error_text = "Xatolik yuz berdi." if lang == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
            await call.message.edit_text(error_text)

    @router.callback_query(F.data.startswith("set_status_"))
    @admin_only
    async def set_order_status(call: CallbackQuery):
        """Set order status"""
        try:
            lang = await get_user_lang(call.from_user.id)
            
            parts = call.data.split("_")
            order_id = int(parts[2])
            new_status = parts[3]
            
            # Update order status
            success = await update_zayavka_status(order_id, new_status, call.from_user.id)
            
            if success:
                # Log admin action
                await log_admin_action(call.from_user.id, "update_status", {
                    "order_id": order_id,
                    "new_status": new_status
                })
                
                status_names = {
                    'pending': ('Kutilmoqda', '–û–∂–∏–¥–∞–µ—Ç'),
                    'in_progress': ('Jarayonda', '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'),
                    'completed': ('Bajarilgan', '–í—ã–ø–æ–ª–Ω–µ–Ω–æ'),
                    'cancelled': ('Bekor qilingan', '–û—Ç–º–µ–Ω–µ–Ω–æ')
                }
                
                status_name = status_names.get(new_status, (new_status, new_status))
                status_text = status_name[0] if lang == 'uz' else status_name[1]
                
                text = f"‚úÖ Zayavka #{order_id} statusi '{status_text}' ga o'zgartirildi." if lang == 'uz' else f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #{order_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{status_text}'."
                await call.answer("Status o'zgartirildi!" if lang == 'uz' else "–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω!")
                
                await call.message.delete()
            else:
                text = "Statusni o'zgartirishda xatolik." if lang == 'uz' else "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞."
                await call.answer("Xatolik!" if lang == 'uz' else "–û—à–∏–±–∫–∞!")
                
                # Show error message and return to previous menu
                await call.message.edit_text(text)
        
        except Exception as e:
            logger.error(f"Error setting order status: {e}")
            await call.answer("Xatolik yuz berdi!" if await get_user_lang(call.from_user.id) == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!")
            
            # Show error message and return to previous menu
            lang = await get_user_lang(call.from_user.id)
            text = "Xatolik yuz berdi." if lang == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
            await call.message.edit_text(text)

    @router.callback_query(F.data.startswith("bulk_confirm_"))
    @admin_only
    async def confirm_bulk_assign(call: CallbackQuery, state: FSMContext):
        """
        Texnikni tanlashdan so'ng, barcha tanlangan buyurtmalarni shu texnikka biriktiradi.
        """
        try:
            lang = await get_user_lang(call.from_user.id)
            parts = call.data.split("_")
            order_type = parts[2]
            technician_id = int(parts[3])

            # order_id larni state dan olish (masalan, 'selected_order_ids' deb saqlangan bo'lishi mumkin)
            data = await state.get_data()
            order_ids = data.get("selected_order_ids", [])

            if not order_ids:
                await call.answer("Buyurtmalar topilmadi." if lang == 'uz' else "–ó–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)
                return

            # Bulk biriktirish
            result = await bulk_assign_orders(order_ids, technician_id, call.from_user.id)

            if result:
                text = "Buyurtmalar texnikka biriktirildi." if lang == 'uz' else "–ó–∞—è–≤–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã —Ç–µ—Ö–Ω–∏–∫—É."
            else:
                text = "Biriktirishda xatolik." if lang == 'uz' else "–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏."

            await call.message.edit_text(text)
            await call.answer()
        except Exception as e:
            logger.error(f"Error in confirm_bulk_assign: {e}")
            await call.answer("Xatolik yuz berdi." if lang == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

    @router.message(F.text.in_(["üîç Zayavka qidirish", "üîç –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏"]))
    @admin_only
    async def search_orders_menu(message: Message, state: FSMContext):
        """Search orders menu"""
        try:
            await safe_delete_message(message.bot, message.chat.id, message.message_id)
            lang = await get_user_lang(message.from_user.id)
            
            text = "Zayavka ID sini kiriting:" if lang == 'uz' else "–í–≤–µ–¥–∏—Ç–µ ID –∑–∞—è–≤–∫–∏:"
            
            await message.answer(text)
            await state.set_state(AdminStates.waiting_for_order_id)
        
        except Exception as e:
            logger.error(f"Error in search orders menu: {e}")
            lang = await get_user_lang(message.from_user.id)
            error_text = "Xatolik yuz berdi." if lang == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
            await message.answer(error_text)

    @router.message(AdminStates.waiting_for_order_id)
    @admin_only
    async def process_order_search(message: Message, state: FSMContext):
        """Process order search"""
        try:
            lang = await get_user_lang(message.from_user.id)
            
            try:
                order_id = int(message.text.strip())
            except ValueError:
                text = "Noto'g'ri format. Raqam kiriting." if lang == 'uz' else "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ."
                await message.answer(text)
                return
            
            # Get order details
            order = await get_zayavka_by_id(order_id)
            
            if not order:
                text = f"#{order_id} raqamli zayavka topilmadi." if lang == 'uz' else f"–ó–∞—è–≤–∫–∞ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
                await message.answer(text)
                await state.clear()
                return
            
            # Show order details (reuse the function from callback)
            if lang == 'uz':
                text = (
                    f"üîç <b>Qidiruv natijasi</b>\n\n"
                    f"üìã <b>Zayavka #{order['id']}</b>\n\n"
                    f"üë§ <b>Mijoz:</b> {order.get('user_name', 'N/A')}\n"
                    f"üì± <b>Telefon:</b> {order.get('client_phone', 'N/A')}\n"
                    f"üìç <b>Manzil:</b> {order.get('address', 'N/A')}\n"
                    f"üìù <b>Tavsif:</b> {order.get('description', 'N/A')}\n"
                    f"üìä <b>Status:</b> {order['status']}\n"
                    f"üìÖ <b>Yaratilgan:</b> {order['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
                )
            else:
                text = (
                    f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞</b>\n\n"
                    f"üìã <b>–ó–∞—è–≤–∫–∞ #{order_id}</b>\n\n"
                    f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {order.get('user_name', 'N/A')}\n"
                    f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {order.get('client_phone', 'N/A')}\n"
                    f"üìç <b>–ê–¥—Ä–µ—Å:</b> {order.get('address', 'N/A')}\n"
                    f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {order.get('description', 'N/A')}\n"
                    f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {order['status']}\n"
                    f"üìÖ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {order['created_at'].strftime('%d.%m.%Y %H:%M')}\n"
                )
            
            # Add management buttons
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üìã Batafsil" if lang == 'uz' else "üìã –ü–æ–¥—Ä–æ–±–Ω–æ",
                        callback_data=f"order_details_{order_id}"
                    )
                ]
            ])
            
            # Add back button
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(
                    text="‚óÄÔ∏è Orqaga" if lang == 'uz' else "‚óÄÔ∏è –ù–∞–∑–∞–¥",
                    callback_data="back_to_orders"
                )
            ])
            
            await message.answer(text, reply_markup=keyboard)
            await state.clear()
        
        except Exception as e:
            logger.error(f"Error in order search: {e}")
            lang = await get_user_lang(message.from_user.id)
            error_text = "Xatolik yuz berdi." if lang == 'uz' else "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
            await message.answer(error_text)
            await state.clear()

    return router