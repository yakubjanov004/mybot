"""
Shared Staff Application Creation Flow Handler

This module contains shared handlers for application creation flow that are
common across all staff roles (Manager, Junior Manager, Controller, Call Center).
These handlers manage the application form filling, confirmation, and submission process.
"""

from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from typing import Dict, Any, Optional

from database.base_queries import get_user_by_telegram_id, get_user_lang
from handlers.staff_application_creation import RoleBasedApplicationHandler
from states.staff_application_states import StaffApplicationStates
from utils.logger import setup_module_logger
from utils.inline_cleanup import cleanup_user_inline_messages

logger = setup_module_logger("shared_staff_application_flow")


def get_shared_staff_application_flow_router():
    """Get router for shared staff application creation flow handlers"""
    router = Router()
    
    # Initialize the role-based application handler
    app_handler = RoleBasedApplicationHandler()
    
    # Client confirmation handlers (shared across all roles)
    @router.callback_query(F.data.in_([
        "confirm_client_selection", "jm_confirm_client_selection", 
        "ctrl_confirm_client_selection", "cc_confirm_client_selection"
    ]))
    async def confirm_client_selection(callback: CallbackQuery, state: FSMContext):
        """Handle client selection confirmation for all roles"""
        try:
            user = await get_user_by_telegram_id(callback.from_user.id)
            if not user:
                await callback.answer("Ruxsat yo'q", show_alert=True)
                return
            
            lang = user.get('language', 'uz')
            
            # Get FSM data
            data = await state.get_data()
            selected_client = data.get('selected_client')
            application_type = data.get('application_type')
            
            if not selected_client or not application_type:
                error_text = "Ma'lumotlar topilmadi" if lang == 'uz' else "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
                await callback.answer(error_text, show_alert=True)
                return
            
            # Move to application description entry
            await state.set_state(StaffApplicationStates.entering_application_description)
            
            # Create prompt based on application type
            if application_type == 'connection_request':
                prompt_text = (
                    f"üîå Ulanish arizasi - {selected_client['full_name']}\n\n"
                    f"Ariza tavsifini kiriting:\n\n"
                    f"Masalan:\n"
                    f"‚Ä¢ Internet ulanishini o'rnatish\n"
                    f"‚Ä¢ Yangi tarif rejasiga o'tish\n"
                    f"‚Ä¢ Qo'shimcha xizmatlar ulash\n\n"
                    f"Batafsil tavsif yozing:"
                ) if lang == 'uz' else (
                    f"üîå –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ - {selected_client['full_name']}\n\n"
                    f"–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏:\n\n"
                    f"–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                    f"‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n"
                    f"‚Ä¢ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω\n"
                    f"‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥\n\n"
                    f"–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:"
                )
            else:  # technical_service
                prompt_text = (
                    f"üîß Texnik xizmat arizasi - {selected_client['full_name']}\n\n"
                    f"Texnik muammo tavsifini kiriting:\n\n"
                    f"Masalan:\n"
                    f"‚Ä¢ Internet aloqasi uziladi\n"
                    f"‚Ä¢ Sekin internet tezligi\n"
                    f"‚Ä¢ Jihozlar ishlamayapti\n"
                    f"‚Ä¢ Kabel shikastlangan\n\n"
                    f"Muammo haqida batafsil yozing:"
                ) if lang == 'uz' else (
                    f"üîß –ó–∞—è–≤–∫–∞ –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ - {selected_client['full_name']}\n\n"
                    f"–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–±–ª–µ–º—ã:\n\n"
                    f"–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                    f"‚Ä¢ –ü—Ä–æ–ø–∞–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n"
                    f"‚Ä¢ –ú–µ–¥–ª–µ–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞\n"
                    f"‚Ä¢ –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ\n"
                    f"‚Ä¢ –ü–æ–≤—Ä–µ–∂–¥–µ–Ω –∫–∞–±–µ–ª—å\n\n"
                    f"–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:"
                )
            
            await callback.message.edit_text(prompt_text, reply_markup=None)
            await callback.answer()
            
        except Exception as e:
            logger.error(f"Error in confirm_client_selection: {e}", exc_info=True)
            await callback.answer("Xatolik yuz berdi", show_alert=True)
    
    @router.callback_query(F.data.in_([
        "search_another_client", "jm_search_another_client", 
        "ctrl_search_another_client", "cc_search_another_client"
    ]))
    async def search_another_client(callback: CallbackQuery, state: FSMContext):
        """Handle search another client for all roles"""
        try:
            user = await get_user_by_telegram_id(callback.from_user.id)
            if not user:
                await callback.answer("Ruxsat yo'q", show_alert=True)
                return
            
            lang = user.get('language', 'uz')
            
            # Reset to client search method selection
            await state.set_state(StaffApplicationStates.selecting_client_search_method)
            
            prompt_text = (
                "üîç Boshqa mijoz qidirish\n\n"
                "Mijozni qanday qidirishni xohlaysiz?"
            ) if lang == 'uz' else (
                "üîç –ü–æ–∏—Å–∫ –¥—Ä—É–≥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞\n\n"
                "–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞?"
            )
            
            # Create role-specific callback prefixes
            role = user['role']
            prefix_map = {
                'manager': '',
                'junior_manager': 'jm_',
                'controller': 'ctrl_',
                'call_center': 'cc_'
            }
            prefix = prefix_map.get(role, '')
            
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üì± Telefon" if lang == 'uz' else "üì± –¢–µ–ª–µ—Ñ–æ–Ω",
                        callback_data=f"{prefix}client_search_phone"
                    ),
                    InlineKeyboardButton(
                        text="üë§ Ism" if lang == 'uz' else "üë§ –ò–º—è",
                        callback_data=f"{prefix}client_search_name"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üÜî ID" if lang == 'uz' else "üÜî ID",
                        callback_data=f"{prefix}client_search_id"
                    ),
                    InlineKeyboardButton(
                        text="‚ûï Yangi" if lang == 'uz' else "‚ûï –ù–æ–≤—ã–π",
                        callback_data=f"{prefix}client_search_new"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚ùå Bekor qilish" if lang == 'uz' else "‚ùå –û—Ç–º–µ–Ω–∞",
                        callback_data=f"{prefix}cancel_application_creation"
                    )
                ]
            ])
            
            await callback.message.edit_text(prompt_text, reply_markup=keyboard)
            await callback.answer()
            
        except Exception as e:
            logger.error(f"Error in search_another_client: {e}", exc_info=True)
            await callback.answer("Xatolik yuz berdi", show_alert=True)
    
    # Application description handler
    @router.message(StaffApplicationStates.entering_application_description)
    async def handle_application_description(message: Message, state: FSMContext):
        """Handle application description input for all roles"""
        try:
            user = await get_user_by_telegram_id(message.from_user.id)
            if not user:
                return
            
            lang = user.get('language', 'uz')
            description = message.text.strip()
            
            # Validate description
            if len(description) < 10:
                error_text = (
                    "‚ùå Tavsif juda qisqa. Kamida 10 ta belgi bo'lishi kerak.\n"
                    "Iltimos, batafsil tavsif yozing."
                ) if lang == 'uz' else (
                    "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ."
                )
                await message.answer(error_text)
                return
            
            if len(description) > 1000:
                error_text = (
                    "‚ùå Tavsif juda uzun. Maksimal 1000 ta belgi bo'lishi kerak."
                ) if lang == 'uz' else (
                    "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤."
                )
                await message.answer(error_text)
                return
            
            # Store description and move to address entry
            await state.update_data(application_description=description)
            await state.set_state(StaffApplicationStates.entering_application_address)
            
            # Get client info for context
            data = await state.get_data()
            selected_client = data.get('selected_client', {})
            
            address_prompt = (
                f"üìç Xizmat manzilini kiriting:\n\n"
                f"Mijoz: {selected_client.get('full_name', 'Noma\'lum')}\n"
                f"Tavsif: {description[:50]}{'...' if len(description) > 50 else ''}\n\n"
                f"Xizmat ko'rsatiladigan aniq manzilni kiriting:\n"
                f"(Ko'cha, uy raqami, kvartira va boshqa ma'lumotlar)"
            ) if lang == 'uz' else (
                f"üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:\n\n"
                f"–ö–ª–∏–µ–Ω—Ç: {selected_client.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {description[:50]}{'...' if len(description) > 50 else ''}\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è:\n"
                f"(–£–ª–∏—Ü–∞, –Ω–æ–º–µ—Ä –¥–æ–º–∞, –∫–≤–∞—Ä—Ç–∏—Ä–∞ –∏ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ)"
            )
            
            await message.answer(address_prompt)
            
        except Exception as e:
            logger.error(f"Error in handle_application_description: {e}", exc_info=True)
    
    # Application address handler
    @router.message(StaffApplicationStates.entering_application_address)
    async def handle_application_address(message: Message, state: FSMContext):
        """Handle application address input for all roles"""
        try:
            user = await get_user_by_telegram_id(message.from_user.id)
            if not user:
                return
            
            lang = user.get('language', 'uz')
            address = message.text.strip()
            
            # Validate address
            if len(address) < 5:
                error_text = (
                    "‚ùå Manzil juda qisqa. Kamida 5 ta belgi bo'lishi kerak.\n"
                    "Iltimos, to'liq manzilni kiriting."
                ) if lang == 'uz' else (
                    "‚ùå –ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å."
                )
                await message.answer(error_text)
                return
            
            # Store address and move to confirmation
            await state.update_data(application_address=address)
            await state.set_state(StaffApplicationStates.reviewing_application_details)
            
            # Get all data for review
            data = await state.get_data()
            selected_client = data.get('selected_client', {})
            application_type = data.get('application_type', '')
            description = data.get('application_description', '')
            creator_context = data.get('creator_context', {})
            
            # Create application type display
            app_type_display = (
                "üîå Ulanish arizasi" if application_type == 'connection_request' 
                else "üîß Texnik xizmat arizasi"
            ) if lang == 'uz' else (
                "üîå –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ" if application_type == 'connection_request' 
                else "üîß –ó–∞—è–≤–∫–∞ –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ"
            )
            
            # Create review text
            review_text = (
                f"üìã Ariza ma'lumotlarini ko'rib chiqing:\n\n"
                f"üìù Turi: {app_type_display}\n"
                f"üë§ Mijoz: {selected_client.get('full_name', 'Noma\'lum')}\n"
                f"üì± Telefon: {selected_client.get('phone', 'Noma\'lum')}\n"
                f"üìç Manzil: {address}\n"
                f"üìÑ Tavsif: {description}\n"
                f"üë®‚Äçüíº Yaratuvchi: {creator_context.get('creator_role', 'Noma\'lum').title()}\n\n"
                f"Ma'lumotlar to'g'rimi?"
            ) if lang == 'uz' else (
                f"üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n\n"
                f"üìù –¢–∏–ø: {app_type_display}\n"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: {selected_client.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {selected_client.get('phone', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"üìç –ê–¥—Ä–µ—Å: {address}\n"
                f"üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                f"üë®‚Äçüíº –°–æ–∑–¥–∞—Ç–µ–ª—å: {creator_context.get('creator_role', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ').title()}\n\n"
                f"–î–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã?"
            )
            
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ Ha, yuborish" if lang == 'uz' else "‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å",
                        callback_data="submit_application"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚úèÔ∏è Tavsifni o'zgartirish" if lang == 'uz' else "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ",
                        callback_data="edit_description"
                    ),
                    InlineKeyboardButton(
                        text="üìç Manzilni o'zgartirish" if lang == 'uz' else "üìç –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å",
                        callback_data="edit_address"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üë§ Mijozni o'zgartirish" if lang == 'uz' else "üë§ –ò–∑–º–µ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞",
                        callback_data="edit_client"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚ùå Bekor qilish" if lang == 'uz' else "‚ùå –û—Ç–º–µ–Ω–∞",
                        callback_data="cancel_application_final"
                    )
                ]
            ])
            
            await message.answer(review_text, reply_markup=keyboard)
            
        except Exception as e:
            logger.error(f"Error in handle_application_address: {e}", exc_info=True)
    
    # Application submission handler
    @router.callback_query(F.data == "submit_application")
    async def submit_application(callback: CallbackQuery, state: FSMContext):
        """Handle application submission for all roles"""
        try:
            user = await get_user_by_telegram_id(callback.from_user.id)
            if not user:
                await callback.answer("Ruxsat yo'q", show_alert=True)
                return
            
            lang = user.get('language', 'uz')
            
            # Get all data
            data = await state.get_data()
            selected_client = data.get('selected_client', {})
            application_type = data.get('application_type', '')
            description = data.get('application_description', '')
            address = data.get('application_address', '')
            creator_context = data.get('creator_context', {})
            
            # Set processing state
            await state.set_state(StaffApplicationStates.processing_submission)
            
            processing_text = (
                "‚è≥ Ariza yuborilmoqda...\n\n"
                "Iltimos, kuting."
            ) if lang == 'uz' else (
                "‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏...\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
            )
            
            await callback.message.edit_text(processing_text, reply_markup=None)
            
            # Prepare application data
            application_data = {
                'client_data': {
                    'phone': selected_client.get('phone', ''),
                    'full_name': selected_client.get('full_name', ''),
                    'address': selected_client.get('address', ''),
                    'additional_info': ''
                },
                'application_data': {
                    'description': description,
                    'location': address,
                    'priority': 'medium',
                    'additional_notes': f"Created by {creator_context.get('creator_role', 'staff')}"
                }
            }
            
            # Process and submit application
            form_result = await app_handler.process_application_form(application_data, creator_context)
            
            if not form_result['success']:
                error_text = (
                    f"‚ùå Ariza yaratishda xatolik:\n{form_result.get('error_message', 'Noma\'lum xatolik')}"
                ) if lang == 'uz' else (
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏:\n{form_result.get('error_message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                )
                await callback.message.edit_text(error_text)
                return
            
            # Submit application
            submit_result = await app_handler.validate_and_submit(
                form_result['processed_data'], creator_context
            )
            
            if submit_result['success']:
                await state.set_state(StaffApplicationStates.application_submitted)
                
                success_text = (
                    f"‚úÖ Ariza muvaffaqiyatli yaratildi!\n\n"
                    f"üìã Ariza ID: {submit_result['application_id']}\n"
                    f"üë§ Mijoz: {selected_client.get('full_name', '')}\n"
                    f"üì± Telefon: {selected_client.get('phone', '')}\n"
                    f"üìç Manzil: {address}\n\n"
                    f"Mijozga bildirishnoma yuborildi.\n"
                    f"Ariza ish jarayoniga kiritildi."
                ) if lang == 'uz' else (
                    f"‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                    f"üìã ID –∑–∞—è–≤–∫–∏: {submit_result['application_id']}\n"
                    f"üë§ –ö–ª–∏–µ–Ω—Ç: {selected_client.get('full_name', '')}\n"
                    f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {selected_client.get('phone', '')}\n"
                    f"üìç –ê–¥—Ä–µ—Å: {address}\n\n"
                    f"–ö–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.\n"
                    f"–ó–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ —Ä–∞–±–æ—Ç—É."
                )
                
                from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üÜï Yangi ariza yaratish" if lang == 'uz' else "üÜï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É",
                            callback_data="create_another_application"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="üè† Asosiy menyu" if lang == 'uz' else "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                            callback_data="return_to_main_menu"
                        )
                    ]
                ])
                
                await callback.message.edit_text(success_text, reply_markup=keyboard)
                
            else:
                error_text = (
                    f"‚ùå Ariza yuborishda xatolik:\n{submit_result.get('error_message', 'Noma\'lum xatolik')}"
                ) if lang == 'uz' else (
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏:\n{submit_result.get('error_message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                )
                await callback.message.edit_text(error_text)
            
            await callback.answer()
            
        except Exception as e:
            logger.error(f"Error in submit_application: {e}", exc_info=True)
            await callback.answer("Xatolik yuz berdi", show_alert=True)
    
    # Edit handlers
    @router.callback_query(F.data == "edit_description")
    async def edit_description(callback: CallbackQuery, state: FSMContext):
        """Handle edit description request"""
        try:
            await state.set_state(StaffApplicationStates.entering_application_description)
            
            user = await get_user_by_telegram_id(callback.from_user.id)
            lang = user.get('language', 'uz') if user else 'uz'
            
            edit_text = (
                "‚úèÔ∏è Ariza tavsifini qayta kiriting:"
            ) if lang == 'uz' else (
                "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∑–∞–Ω–æ–≤–æ:"
            )
            
            await callback.message.edit_text(edit_text, reply_markup=None)
            await callback.answer()
            
        except Exception as e:
            logger.error(f"Error in edit_description: {e}", exc_info=True)
            await callback.answer("Xatolik yuz berdi", show_alert=True)
    
    @router.callback_query(F.data == "edit_address")
    async def edit_address(callback: CallbackQuery, state: FSMContext):
        """Handle edit address request"""
        try:
            await state.set_state(StaffApplicationStates.entering_application_address)
            
            user = await get_user_by_telegram_id(callback.from_user.id)
            lang = user.get('language', 'uz') if user else 'uz'
            
            edit_text = (
                "üìç Xizmat manzilini qayta kiriting:"
            ) if lang == 'uz' else (
                "üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∑–∞–Ω–æ–≤–æ:"
            )
            
            await callback.message.edit_text(edit_text, reply_markup=None)
            await callback.answer()
            
        except Exception as e:
            logger.error(f"Error in edit_address: {e}", exc_info=True)
            await callback.answer("Xatolik yuz berdi", show_alert=True)
    
    @router.callback_query(F.data == "edit_client")
    async def edit_client(callback: CallbackQuery, state: FSMContext):
        """Handle edit client request"""
        try:
            await state.set_state(StaffApplicationStates.selecting_client_search_method)
            
            user = await get_user_by_telegram_id(callback.from_user.id)
            lang = user.get('language', 'uz') if user else 'uz'
            
            # Get role-specific prefix
            role = user['role'] if user else 'manager'
            prefix_map = {
                'manager': '',
                'junior_manager': 'jm_',
                'controller': 'ctrl_',
                'call_center': 'cc_'
            }
            prefix = prefix_map.get(role, '')
            
            edit_text = (
                "üë§ Boshqa mijozni tanlang:"
            ) if lang == 'uz' else (
                "üë§ –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞:"
            )
            
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üì± Telefon" if lang == 'uz' else "üì± –¢–µ–ª–µ—Ñ–æ–Ω",
                        callback_data=f"{prefix}client_search_phone"
                    ),
                    InlineKeyboardButton(
                        text="üë§ Ism" if lang == 'uz' else "üë§ –ò–º—è",
                        callback_data=f"{prefix}client_search_name"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üÜî ID" if lang == 'uz' else "üÜî ID",
                        callback_data=f"{prefix}client_search_id"
                    ),
                    InlineKeyboardButton(
                        text="‚ûï Yangi" if lang == 'uz' else "‚ûï –ù–æ–≤—ã–π",
                        callback_data=f"{prefix}client_search_new"
                    )
                ]
            ])
            
            await callback.message.edit_text(edit_text, reply_markup=keyboard)
            await callback.answer()
            
        except Exception as e:
            logger.error(f"Error in edit_client: {e}", exc_info=True)
            await callback.answer("Xatolik yuz berdi", show_alert=True)
    
    # Final handlers
    @router.callback_query(F.data == "create_another_application")
    async def create_another_application(callback: CallbackQuery, state: FSMContext):
        """Handle create another application request"""
        try:
            user = await get_user_by_telegram_id(callback.from_user.id)
            if not user:
                await callback.answer("Ruxsat yo'q", show_alert=True)
                return
            
            lang = user.get('language', 'uz')
            
            # Clear state and start over
            await state.clear()
            
            restart_text = (
                "üÜï Yangi ariza yaratish\n\n"
                "Qaysi turdagi ariza yaratmoqchisiz?"
            ) if lang == 'uz' else (
                "üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏\n\n"
                "–ö–∞–∫–æ–π —Ç–∏–ø –∑–∞—è–≤–∫–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å?"
            )
            
            # Get role-specific prefix
            role = user['role']
            prefix_map = {
                'manager': '',
                'junior_manager': 'jm_',
                'controller': 'ctrl_',
                'call_center': 'cc_'
            }
            prefix = prefix_map.get(role, '')
            
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            buttons = [
                [
                    InlineKeyboardButton(
                        text="üîå Ulanish arizasi" if lang == 'uz' else "üîå –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
                        callback_data=f"{prefix}start_connection_request"
                    )
                ]
            ]
            
            # Add technical service button for roles that can create it
            if role in ['manager', 'controller', 'call_center']:
                buttons.append([
                    InlineKeyboardButton(
                        text="üîß Texnik xizmat" if lang == 'uz' else "üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
                        callback_data=f"{prefix}start_technical_service"
                    )
                ])
            
            buttons.append([
                InlineKeyboardButton(
                    text="üè† Asosiy menyu" if lang == 'uz' else "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data="return_to_main_menu"
                )
            ])
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
            
            await callback.message.edit_text(restart_text, reply_markup=keyboard)
            await callback.answer()
            
        except Exception as e:
            logger.error(f"Error in create_another_application: {e}", exc_info=True)
            await callback.answer("Xatolik yuz berdi", show_alert=True)
    
    @router.callback_query(F.data.in_(["cancel_application_final", "return_to_main_menu"]))
    async def return_to_main_menu(callback: CallbackQuery, state: FSMContext):
        """Handle return to main menu"""
        try:
            user = await get_user_by_telegram_id(callback.from_user.id)
            if not user:
                await callback.answer("Ruxsat yo'q", show_alert=True)
                return
            
            lang = user.get('language', 'uz')
            await state.clear()
            
            return_text = (
                "üè† Asosiy menyuga qaytdingiz."
            ) if lang == 'uz' else (
                "üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
            )
            
            await callback.message.edit_text(return_text, reply_markup=None)
            
            # Send appropriate main menu based on role
            role = user['role']
            if role == 'manager':
                from keyboards.manager_buttons import get_manager_main_keyboard
                keyboard = get_manager_main_keyboard(lang)
            elif role == 'junior_manager':
                from keyboards.junior_manager_buttons import get_junior_manager_main_keyboard
                keyboard = get_junior_manager_main_keyboard(lang)
            elif role == 'controller':
                from keyboards.controllers_buttons import controllers_main_menu
                keyboard = controllers_main_menu(lang)
            elif role == 'call_center':
                from keyboards.call_center_buttons import call_center_main_menu_reply
                keyboard = call_center_main_menu_reply(lang)
            else:
                keyboard = None
            
            if keyboard:
                main_menu_text = "Asosiy menyu" if lang == 'uz' else "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
                await callback.message.answer(main_menu_text, reply_markup=keyboard)
            
            await callback.answer()
            
        except Exception as e:
            logger.error(f"Error in return_to_main_menu: {e}", exc_info=True)
            await callback.answer("Xatolik yuz berdi", show_alert=True)
    
    return router