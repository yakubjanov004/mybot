"""
Client Search and Selection UI Keyboards
Provides keyboard interfaces for staff members to search, select, and create clients
"""

from aiogram.types import (
    InlineKeyboardMarkup, 
    InlineKeyboardButton, 
    ReplyKeyboardMarkup, 
    KeyboardButton
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from typing import List, Dict, Any, Optional


def get_client_search_method_keyboard(lang: str = 'uz') -> InlineKeyboardMarkup:
    """
    Keyboard for selecting client search method
    
    Args:
        lang: Language code ('uz' or 'ru')
        
    Returns:
        InlineKeyboardMarkup with search method options
    """
    if lang == 'uz':
        buttons = [
            [InlineKeyboardButton(
                text="üìû Telefon raqami bo'yicha", 
                callback_data="client_search_phone"
            )],
            [InlineKeyboardButton(
                text="üë§ Ism bo'yicha", 
                callback_data="client_search_name"
            )],
            [InlineKeyboardButton(
                text="üÜî ID raqami bo'yicha", 
                callback_data="client_search_id"
            )],
            [InlineKeyboardButton(
                text="‚ûï Yangi mijoz yaratish", 
                callback_data="client_create_new"
            )],
            [InlineKeyboardButton(
                text="‚óÄÔ∏è Orqaga", 
                callback_data="staff_app_back_to_type_selection"
            )]
        ]
    else:
        buttons = [
            [InlineKeyboardButton(
                text="üìû –ü–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞", 
                callback_data="client_search_phone"
            )],
            [InlineKeyboardButton(
                text="üë§ –ü–æ –∏–º–µ–Ω–∏", 
                callback_data="client_search_name"
            )],
            [InlineKeyboardButton(
                text="üÜî –ü–æ ID", 
                callback_data="client_search_id"
            )],
            [InlineKeyboardButton(
                text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞", 
                callback_data="client_create_new"
            )],
            [InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥", 
                callback_data="staff_app_back_to_type_selection"
            )]
        ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_client_search_input_keyboard(search_method: str, lang: str = 'uz') -> ReplyKeyboardMarkup:
    """
    Keyboard for client search input with cancel option
    
    Args:
        search_method: Type of search ('phone', 'name', 'id')
        lang: Language code ('uz' or 'ru')
        
    Returns:
        ReplyKeyboardMarkup with cancel button
    """
    if lang == 'uz':
        cancel_text = "‚ùå Bekor qilish"
        back_text = "‚óÄÔ∏è Orqaga"
    else:
        cancel_text = "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"
        back_text = "‚óÄÔ∏è –ù–∞–∑–∞–¥"
    
    keyboard = [
        [KeyboardButton(text=cancel_text)],
        [KeyboardButton(text=back_text)]
    ]
    
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


def get_client_selection_keyboard(clients: List[Dict[str, Any]], lang: str = 'uz') -> InlineKeyboardMarkup:
    """
    Keyboard for selecting from multiple found clients
    
    Args:
        clients: List of client dictionaries
        lang: Language code ('uz' or 'ru')
        
    Returns:
        InlineKeyboardMarkup with client selection options
    """
    builder = InlineKeyboardBuilder()
    
    # Add client selection buttons (limit to 8 for UI clarity)
    for i, client in enumerate(clients[:8]):
        client_name = client.get('full_name', 'Unknown')
        client_phone = client.get('phone_number', 'No phone')
        client_id = client.get('id', 'Unknown')
        
        # Truncate long names for button display
        display_name = client_name[:20] + "..." if len(client_name) > 20 else client_name
        button_text = f"üë§ {display_name} - {client_phone}"
        
        builder.add(InlineKeyboardButton(
            text=button_text,
            callback_data=f"client_select_{client_id}"
        ))
    
    # Add "Create new client" option if search didn't find exact match
    if lang == 'uz':
        builder.add(InlineKeyboardButton(
            text="‚ûï Yangi mijoz yaratish",
            callback_data="client_create_new"
        ))
        builder.add(InlineKeyboardButton(
            text="üîç Qayta qidirish",
            callback_data="client_search_again"
        ))
        builder.add(InlineKeyboardButton(
            text="‚óÄÔ∏è Orqaga",
            callback_data="staff_app_back_to_search_method"
        ))
    else:
        builder.add(InlineKeyboardButton(
            text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞",
            callback_data="client_create_new"
        ))
        builder.add(InlineKeyboardButton(
            text="üîç –ü–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ",
            callback_data="client_search_again"
        ))
        builder.add(InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="staff_app_back_to_search_method"
        ))
    
    # Adjust layout: 1 client per row, then control buttons
    builder.adjust(1)
    
    return builder.as_markup()


def get_client_confirmation_keyboard(client_data: Dict[str, Any], lang: str = 'uz') -> InlineKeyboardMarkup:
    """
    Keyboard for confirming selected client
    
    Args:
        client_data: Selected client data
        lang: Language code ('uz' or 'ru')
        
    Returns:
        InlineKeyboardMarkup with confirmation options
    """
    client_id = client_data.get('id', 0)
    
    if lang == 'uz':
        buttons = [
            [InlineKeyboardButton(
                text="‚úÖ Tasdiqlash",
                callback_data=f"client_confirm_{client_id}"
            )],
            [InlineKeyboardButton(
                text="‚úèÔ∏è Ma'lumotlarni ko'rish",
                callback_data=f"client_view_details_{client_id}"
            )],
            [InlineKeyboardButton(
                text="üîç Boshqa mijoz tanlash",
                callback_data="client_search_again"
            )],
            [InlineKeyboardButton(
                text="‚óÄÔ∏è Orqaga",
                callback_data="staff_app_back_to_search_method"
            )]
        ]
    else:
        buttons = [
            [InlineKeyboardButton(
                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                callback_data=f"client_confirm_{client_id}"
            )],
            [InlineKeyboardButton(
                text="‚úèÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö",
                callback_data=f"client_view_details_{client_id}"
            )],
            [InlineKeyboardButton(
                text="üîç –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞",
                callback_data="client_search_again"
            )],
            [InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                callback_data="staff_app_back_to_search_method"
            )]
        ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_new_client_form_keyboard(step: str, lang: str = 'uz') -> ReplyKeyboardMarkup:
    """
    Keyboard for new client creation form steps
    
    Args:
        step: Current form step ('name', 'phone', 'address')
        lang: Language code ('uz' or 'ru')
        
    Returns:
        ReplyKeyboardMarkup with appropriate options for the step
    """
    if lang == 'uz':
        skip_text = "‚è≠Ô∏è O'tkazib yuborish"
        cancel_text = "‚ùå Bekor qilish"
        back_text = "‚óÄÔ∏è Orqaga"
    else:
        skip_text = "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
        cancel_text = "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"
        back_text = "‚óÄÔ∏è –ù–∞–∑–∞–¥"
    
    keyboard = []
    
    # Address step can be skipped
    if step == 'address':
        keyboard.append([KeyboardButton(text=skip_text)])
    
    keyboard.extend([
        [KeyboardButton(text=cancel_text)],
        [KeyboardButton(text=back_text)]
    ])
    
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


def get_new_client_confirmation_keyboard(lang: str = 'uz') -> InlineKeyboardMarkup:
    """
    Keyboard for confirming new client creation
    
    Args:
        lang: Language code ('uz' or 'ru')
        
    Returns:
        InlineKeyboardMarkup with confirmation options
    """
    if lang == 'uz':
        buttons = [
            [InlineKeyboardButton(
                text="‚úÖ Mijozni yaratish",
                callback_data="new_client_confirm_create"
            )],
            [InlineKeyboardButton(
                text="‚úèÔ∏è Ismni o'zgartirish",
                callback_data="new_client_edit_name"
            )],
            [InlineKeyboardButton(
                text="üìû Telefonni o'zgartirish",
                callback_data="new_client_edit_phone"
            )],
            [InlineKeyboardButton(
                text="üìç Manzilni o'zgartirish",
                callback_data="new_client_edit_address"
            )],
            [InlineKeyboardButton(
                text="‚ùå Bekor qilish",
                callback_data="new_client_cancel"
            )]
        ]
    else:
        buttons = [
            [InlineKeyboardButton(
                text="‚úÖ –°–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞",
                callback_data="new_client_confirm_create"
            )],
            [InlineKeyboardButton(
                text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è",
                callback_data="new_client_edit_name"
            )],
            [InlineKeyboardButton(
                text="üìû –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω",
                callback_data="new_client_edit_phone"
            )],
            [InlineKeyboardButton(
                text="üìç –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å",
                callback_data="new_client_edit_address"
            )],
            [InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                callback_data="new_client_cancel"
            )]
        ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_client_details_keyboard(client_id: int, lang: str = 'uz') -> InlineKeyboardMarkup:
    """
    Keyboard for viewing and editing client details
    
    Args:
        client_id: Client database ID
        lang: Language code ('uz' or 'ru')
        
    Returns:
        InlineKeyboardMarkup with client detail options
    """
    if lang == 'uz':
        buttons = [
            [InlineKeyboardButton(
                text="‚úÖ Bu mijozni tanlash",
                callback_data=f"client_confirm_{client_id}"
            )],
            [InlineKeyboardButton(
                text="‚úèÔ∏è Ma'lumotlarni yangilash",
                callback_data=f"client_edit_{client_id}"
            )],
            [InlineKeyboardButton(
                text="üìã Arizalar tarixi",
                callback_data=f"client_history_{client_id}"
            )],
            [InlineKeyboardButton(
                text="üîç Boshqa mijoz qidirish",
                callback_data="client_search_again"
            )],
            [InlineKeyboardButton(
                text="‚óÄÔ∏è Orqaga",
                callback_data="staff_app_back_to_search_method"
            )]
        ]
    else:
        buttons = [
            [InlineKeyboardButton(
                text="‚úÖ –í—ã–±—Ä–∞—Ç—å —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞",
                callback_data=f"client_confirm_{client_id}"
            )],
            [InlineKeyboardButton(
                text="‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
                callback_data=f"client_edit_{client_id}"
            )],
            [InlineKeyboardButton(
                text="üìã –ò—Å—Ç–æ—Ä–∏—è –∑–∞—è–≤–æ–∫",
                callback_data=f"client_history_{client_id}"
            )],
            [InlineKeyboardButton(
                text="üîç –ù–∞–π—Ç–∏ –¥—Ä—É–≥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞",
                callback_data="client_search_again"
            )],
            [InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                callback_data="staff_app_back_to_search_method"
            )]
        ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_client_edit_keyboard(client_id: int, lang: str = 'uz') -> InlineKeyboardMarkup:
    """
    Keyboard for editing client information
    
    Args:
        client_id: Client database ID
        lang: Language code ('uz' or 'ru')
        
    Returns:
        InlineKeyboardMarkup with edit options
    """
    if lang == 'uz':
        buttons = [
            [InlineKeyboardButton(
                text="‚úèÔ∏è Ismni o'zgartirish",
                callback_data=f"client_edit_name_{client_id}"
            )],
            [InlineKeyboardButton(
                text="üìû Telefonni o'zgartirish",
                callback_data=f"client_edit_phone_{client_id}"
            )],
            [InlineKeyboardButton(
                text="üìç Manzilni o'zgartirish",
                callback_data=f"client_edit_address_{client_id}"
            )],
            [InlineKeyboardButton(
                text="üåê Tilni o'zgartirish",
                callback_data=f"client_edit_language_{client_id}"
            )],
            [InlineKeyboardButton(
                text="‚úÖ O'zgarishlarni saqlash",
                callback_data=f"client_save_changes_{client_id}"
            )],
            [InlineKeyboardButton(
                text="‚óÄÔ∏è Orqaga",
                callback_data=f"client_view_details_{client_id}"
            )]
        ]
    else:
        buttons = [
            [InlineKeyboardButton(
                text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è",
                callback_data=f"client_edit_name_{client_id}"
            )],
            [InlineKeyboardButton(
                text="üìû –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω",
                callback_data=f"client_edit_phone_{client_id}"
            )],
            [InlineKeyboardButton(
                text="üìç –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å",
                callback_data=f"client_edit_address_{client_id}"
            )],
            [InlineKeyboardButton(
                text="üåê –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",
                callback_data=f"client_edit_language_{client_id}"
            )],
            [InlineKeyboardButton(
                text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è",
                callback_data=f"client_save_changes_{client_id}"
            )],
            [InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"client_view_details_{client_id}"
            )]
        ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_client_language_selection_keyboard(client_id: int, lang: str = 'uz') -> InlineKeyboardMarkup:
    """
    Keyboard for selecting client language
    
    Args:
        client_id: Client database ID
        lang: Language code ('uz' or 'ru')
        
    Returns:
        InlineKeyboardMarkup with language options
    """
    buttons = [
        [InlineKeyboardButton(
            text="üá∫üáø O'zbek tili",
            callback_data=f"client_set_lang_uz_{client_id}"
        )],
        [InlineKeyboardButton(
            text="üá∑üá∫ –†—É—Å—Å–∫–∏–π —è–∑—ã–∫",
            callback_data=f"client_set_lang_ru_{client_id}"
        )],
        [InlineKeyboardButton(
            text="‚óÄÔ∏è Orqaga" if lang == 'uz' else "‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"client_edit_{client_id}"
        )]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_search_error_keyboard(error_type: str, lang: str = 'uz') -> InlineKeyboardMarkup:
    """
    Keyboard for handling search errors
    
    Args:
        error_type: Type of error ('not_found', 'invalid_input', 'multiple_found', 'database_error')
        lang: Language code ('uz' or 'ru')
        
    Returns:
        InlineKeyboardMarkup with error handling options
    """
    if lang == 'uz':
        buttons = [
            [InlineKeyboardButton(
                text="üîç Qayta qidirish",
                callback_data="client_search_again"
            )],
            [InlineKeyboardButton(
                text="‚ûï Yangi mijoz yaratish",
                callback_data="client_create_new"
            )],
            [InlineKeyboardButton(
                text="‚óÄÔ∏è Orqaga",
                callback_data="staff_app_back_to_search_method"
            )]
        ]
    else:
        buttons = [
            [InlineKeyboardButton(
                text="üîç –ü–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ",
                callback_data="client_search_again"
            )],
            [InlineKeyboardButton(
                text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞",
                callback_data="client_create_new"
            )],
            [InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                callback_data="staff_app_back_to_search_method"
            )]
        ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_client_history_keyboard(client_id: int, page: int = 1, total_pages: int = 1, lang: str = 'uz') -> InlineKeyboardMarkup:
    """
    Keyboard for client application history with pagination
    
    Args:
        client_id: Client database ID
        page: Current page number
        total_pages: Total number of pages
        lang: Language code ('uz' or 'ru')
        
    Returns:
        InlineKeyboardMarkup with history navigation
    """
    builder = InlineKeyboardBuilder()
    
    # Pagination buttons
    if page > 1:
        prev_text = "‚óÄÔ∏è Oldingi" if lang == 'uz' else "‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è"
        builder.add(InlineKeyboardButton(
            text=prev_text,
            callback_data=f"client_history_{client_id}_page_{page-1}"
        ))
    
    if page < total_pages:
        next_text = "Keyingi ‚ñ∂Ô∏è" if lang == 'uz' else "–°–ª–µ–¥—É—é—â–∞—è ‚ñ∂Ô∏è"
        builder.add(InlineKeyboardButton(
            text=next_text,
            callback_data=f"client_history_{client_id}_page_{page+1}"
        ))
    
    # Page info
    if total_pages > 1:
        builder.add(InlineKeyboardButton(
            text=f"üìÑ {page}/{total_pages}",
            callback_data=f"client_history_page_info"
        ))
    
    # Control buttons
    if lang == 'uz':
        builder.add(InlineKeyboardButton(
            text="‚úÖ Bu mijozni tanlash",
            callback_data=f"client_confirm_{client_id}"
        ))
        builder.add(InlineKeyboardButton(
            text="‚óÄÔ∏è Orqaga",
            callback_data=f"client_view_details_{client_id}"
        ))
    else:
        builder.add(InlineKeyboardButton(
            text="‚úÖ –í—ã–±—Ä–∞—Ç—å —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞",
            callback_data=f"client_confirm_{client_id}"
        ))
        builder.add(InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"client_view_details_{client_id}"
        ))
    
    # Adjust layout
    builder.adjust(2, 1, 2)  # 2 nav buttons, 1 page info, 2 control buttons
    
    return builder.as_markup()


def get_validation_error_keyboard(error_field: str, lang: str = 'uz') -> InlineKeyboardMarkup:
    """
    Keyboard for handling validation errors
    
    Args:
        error_field: Field that failed validation ('name', 'phone', 'address')
        lang: Language code ('uz' or 'ru')
        
    Returns:
        InlineKeyboardMarkup with error handling options
    """
    if lang == 'uz':
        buttons = [
            [InlineKeyboardButton(
                text="‚úèÔ∏è Qayta kiritish",
                callback_data=f"client_retry_input_{error_field}"
            )],
            [InlineKeyboardButton(
                text="‚ùå Bekor qilish",
                callback_data="client_cancel_creation"
            )],
            [InlineKeyboardButton(
                text="‚óÄÔ∏è Orqaga",
                callback_data="staff_app_back_to_search_method"
            )]
        ]
    else:
        buttons = [
            [InlineKeyboardButton(
                text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ",
                callback_data=f"client_retry_input_{error_field}"
            )],
            [InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                callback_data="client_cancel_creation"
            )],
            [InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                callback_data="staff_app_back_to_search_method"
            )]
        ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# Utility functions for keyboard generation
def format_client_display_text(client_data: Dict[str, Any], lang: str = 'uz') -> str:
    """
    Format client data for display in keyboards and messages
    
    Args:
        client_data: Client information dictionary
        lang: Language code ('uz' or 'ru')
        
    Returns:
        Formatted client display text
    """
    name = client_data.get('full_name', 'Unknown')
    phone = client_data.get('phone_number', 'No phone')
    client_id = client_data.get('id', 'Unknown')
    address = client_data.get('address', '')
    language = client_data.get('language', 'uz')
    
    if lang == 'uz':
        text = f"üë§ **Mijoz ma'lumotlari:**\n\n"
        text += f"üìù **Ism:** {name}\n"
        text += f"üìû **Telefon:** {phone}\n"
        text += f"üÜî **ID:** {client_id}\n"
        if address:
            text += f"üìç **Manzil:** {address}\n"
        text += f"üåê **Til:** {'O\'zbek' if language == 'uz' else 'Rus'}\n"
    else:
        text = f"üë§ **–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:**\n\n"
        text += f"üìù **–ò–º—è:** {name}\n"
        text += f"üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** {phone}\n"
        text += f"üÜî **ID:** {client_id}\n"
        if address:
            text += f"üìç **–ê–¥—Ä–µ—Å:** {address}\n"
        text += f"üåê **–Ø–∑—ã–∫:** {'–£–∑–±–µ–∫—Å–∫–∏–π' if language == 'uz' else '–†—É—Å—Å–∫–∏–π'}\n"
    
    return text


def get_search_prompt_text(search_method: str, lang: str = 'uz') -> str:
    """
    Get prompt text for different search methods
    
    Args:
        search_method: Type of search ('phone', 'name', 'id')
        lang: Language code ('uz' or 'ru')
        
    Returns:
        Prompt text for the search method
    """
    prompts = {
        'uz': {
            'phone': "üìû **Mijoz telefon raqamini kiriting:**\n\nMisol: +998901234567 yoki 901234567",
            'name': "üë§ **Mijoz ismini kiriting:**\n\nTo'liq ism yoki ism qismini yozing",
            'id': "üÜî **Mijoz ID raqamini kiriting:**\n\nFaqat raqamlarni kiriting"
        },
        'ru': {
            'phone': "üìû **–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:**\n\n–ü—Ä–∏–º–µ—Ä: +998901234567 –∏–ª–∏ 901234567",
            'name': "üë§ **–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:**\n\n–ü–æ–ª–Ω–æ–µ –∏–º—è –∏–ª–∏ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏",
            'id': "üÜî **–í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞:**\n\n–¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã"
        }
    }
    
    return prompts.get(lang, {}).get(search_method, "Enter search criteria")


def get_new_client_form_prompt(step: str, lang: str = 'uz') -> str:
    """
    Get prompt text for new client form steps
    
    Args:
        step: Form step ('name', 'phone', 'address')
        lang: Language code ('uz' or 'ru')
        
    Returns:
        Prompt text for the form step
    """
    prompts = {
        'uz': {
            'name': "üë§ **Yangi mijoz ismini kiriting:**\n\nTo'liq ism va familiyani yozing",
            'phone': "üìû **Mijoz telefon raqamini kiriting:**\n\nMisol: +998901234567 yoki 901234567",
            'address': "üìç **Mijoz manzilini kiriting:**\n\n(Ixtiyoriy - o'tkazib yuborishingiz mumkin)"
        },
        'ru': {
            'name': "üë§ **–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞:**\n\n–ü–æ–ª–Ω–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é",
            'phone': "üìû **–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:**\n\n–ü—Ä–∏–º–µ—Ä: +998901234567 –∏–ª–∏ 901234567",
            'address': "üìç **–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞:**\n\n(–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ - –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)"
        }
    }
    
    return prompts.get(lang, {}).get(step, "Enter information")


# Export all keyboard functions
__all__ = [
    'get_client_search_method_keyboard',
    'get_client_search_input_keyboard',
    'get_client_selection_keyboard',
    'get_client_confirmation_keyboard',
    'get_new_client_form_keyboard',
    'get_new_client_confirmation_keyboard',
    'get_client_details_keyboard',
    'get_client_edit_keyboard',
    'get_client_language_selection_keyboard',
    'get_search_error_keyboard',
    'get_client_history_keyboard',
    'get_validation_error_keyboard',
    'format_client_display_text',
    'get_search_prompt_text',
    'get_new_client_form_prompt'
]